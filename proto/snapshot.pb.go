// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.9
// source: proto/snapshot.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Main message representing a snapshot of data.
type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // Snapshot identifier.
	UserId    string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // User identifier.
	Tick      float64                `protobuf:"fixed64,3,opt,name=tick,proto3" json:"tick,omitempty"`                 // Timestamp.
	Duration  float64                `protobuf:"fixed64,4,opt,name=duration,proto3" json:"duration,omitempty"`         // Duration of the snapshot.
	Model     string                 `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`                 // Model information.
	Descr     string                 `protobuf:"bytes,6,opt,name=descr,proto3" json:"descr,omitempty"`                 // Description.
	Status    int64                  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`              // Status code.
	Color     string                 `protobuf:"bytes,8,opt,name=color,proto3" json:"color,omitempty"`                 // Color information.
	Navigator *Snapshot_Navigator    `protobuf:"bytes,9,opt,name=navigator,proto3" json:"navigator,omitempty"`         // Navigator data.
	Speed     *Snapshot_CommonType   `protobuf:"bytes,10,opt,name=speed,proto3" json:"speed,omitempty"`                // Speed information.
	Battery   *Snapshot_BatteryType  `protobuf:"bytes,11,opt,name=battery,proto3" json:"battery,omitempty"`            // Battery information.
	Sensors   []*Snapshot_SensorType `protobuf:"bytes,12,rep,name=sensors,proto3" json:"sensors,omitempty"`            // Sensor information.
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *Snapshot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Snapshot) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Snapshot) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *Snapshot) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Snapshot) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Snapshot) GetDescr() string {
	if x != nil {
		return x.Descr
	}
	return ""
}

func (x *Snapshot) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Snapshot) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Snapshot) GetNavigator() *Snapshot_Navigator {
	if x != nil {
		return x.Navigator
	}
	return nil
}

func (x *Snapshot) GetSpeed() *Snapshot_CommonType {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *Snapshot) GetBattery() *Snapshot_BatteryType {
	if x != nil {
		return x.Battery
	}
	return nil
}

func (x *Snapshot) GetSensors() []*Snapshot_SensorType {
	if x != nil {
		return x.Sensors
	}
	return nil
}

// Point with latitude and longitude.
type Snapshot_PointLatLon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lon float64 `protobuf:"fixed64,1,opt,name=lon,proto3" json:"lon,omitempty"` // Longitude.
	Lat float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"` // Latitude.
}

func (x *Snapshot_PointLatLon) Reset() {
	*x = Snapshot_PointLatLon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_PointLatLon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_PointLatLon) ProtoMessage() {}

func (x *Snapshot_PointLatLon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_PointLatLon.ProtoReflect.Descriptor instead.
func (*Snapshot_PointLatLon) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Snapshot_PointLatLon) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Snapshot_PointLatLon) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

// Definition of a curve with control points.
type Snapshot_Curve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*Snapshot_Curve_ControlPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"` // Control points of the curve.
	Mode   int64                          `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`    // Mode of the curve.
	Min    float64                        `protobuf:"fixed64,3,opt,name=min,proto3" json:"min,omitempty"`     // Minimum value of the curve.
	Max    float64                        `protobuf:"fixed64,4,opt,name=max,proto3" json:"max,omitempty"`     // Maximum value of the curve.
}

func (x *Snapshot_Curve) Reset() {
	*x = Snapshot_Curve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Curve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Curve) ProtoMessage() {}

func (x *Snapshot_Curve) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Curve.ProtoReflect.Descriptor instead.
func (*Snapshot_Curve) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Snapshot_Curve) GetPoints() []*Snapshot_Curve_ControlPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Snapshot_Curve) GetMode() int64 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Snapshot_Curve) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Snapshot_Curve) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

// Common data type with a value and optional curve.
type Snapshot_CommonType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min float64         `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"` // Minimum value.
	Max float64         `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"` // Maximum value.
	Val float64         `protobuf:"fixed64,3,opt,name=val,proto3" json:"val,omitempty"` // Actual value.
	Gen *Snapshot_Curve `protobuf:"bytes,4,opt,name=gen,proto3" json:"gen,omitempty"`   // Optional curve generator.
}

func (x *Snapshot_CommonType) Reset() {
	*x = Snapshot_CommonType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_CommonType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_CommonType) ProtoMessage() {}

func (x *Snapshot_CommonType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_CommonType.ProtoReflect.Descriptor instead.
func (*Snapshot_CommonType) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Snapshot_CommonType) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Snapshot_CommonType) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Snapshot_CommonType) GetVal() float64 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *Snapshot_CommonType) GetGen() *Snapshot_Curve {
	if x != nil {
		return x.Gen
	}
	return nil
}

// Battery data type with charge time.
type Snapshot_BatteryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min        float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`                                // Minimum value.
	Max        float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`                                // Maximum value.
	ChargeTime int64   `protobuf:"varint,4,opt,name=charge_time,json=chargeTime,proto3" json:"charge_time,omitempty"` // Charge time.
	Val        float64 `protobuf:"fixed64,5,opt,name=val,proto3" json:"val,omitempty"`                                // Actual value.
}

func (x *Snapshot_BatteryType) Reset() {
	*x = Snapshot_BatteryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_BatteryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_BatteryType) ProtoMessage() {}

func (x *Snapshot_BatteryType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_BatteryType.ProtoReflect.Descriptor instead.
func (*Snapshot_BatteryType) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Snapshot_BatteryType) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Snapshot_BatteryType) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Snapshot_BatteryType) GetChargeTime() int64 {
	if x != nil {
		return x.ChargeTime
	}
	return 0
}

func (x *Snapshot_BatteryType) GetVal() float64 {
	if x != nil {
		return x.Val
	}
	return 0
}

// Sensor data type with various properties.
type Snapshot_SensorType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                   // Sensor identifier.
	Min  float64         `protobuf:"fixed64,2,opt,name=min,proto3" json:"min,omitempty"`               // Minimum value.
	Max  float64         `protobuf:"fixed64,3,opt,name=max,proto3" json:"max,omitempty"`               // Maximum value.
	ValX float64         `protobuf:"fixed64,4,opt,name=val_x,json=valX,proto3" json:"val_x,omitempty"` // Value along X-axis.
	ValY float64         `protobuf:"fixed64,5,opt,name=val_y,json=valY,proto3" json:"val_y,omitempty"` // Value along Y-axis.
	Name string          `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`               // Sensor name.
	Gen  *Snapshot_Curve `protobuf:"bytes,7,opt,name=gen,proto3" json:"gen,omitempty"`                 // Optional curve generator.
}

func (x *Snapshot_SensorType) Reset() {
	*x = Snapshot_SensorType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_SensorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_SensorType) ProtoMessage() {}

func (x *Snapshot_SensorType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_SensorType.ProtoReflect.Descriptor instead.
func (*Snapshot_SensorType) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Snapshot_SensorType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Snapshot_SensorType) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Snapshot_SensorType) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Snapshot_SensorType) GetValX() float64 {
	if x != nil {
		return x.ValX
	}
	return 0
}

func (x *Snapshot_SensorType) GetValY() float64 {
	if x != nil {
		return x.ValY
	}
	return 0
}

func (x *Snapshot_SensorType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Snapshot_SensorType) GetGen() *Snapshot_Curve {
	if x != nil {
		return x.Gen
	}
	return nil
}

type Snapshot_Sensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors []*Snapshot_SensorType `protobuf:"bytes,1,rep,name=sensors,proto3" json:"sensors,omitempty"`
}

func (x *Snapshot_Sensors) Reset() {
	*x = Snapshot_Sensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Sensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Sensors) ProtoMessage() {}

func (x *Snapshot_Sensors) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Sensors.ProtoReflect.Descriptor instead.
func (*Snapshot_Sensors) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Snapshot_Sensors) GetSensors() []*Snapshot_SensorType {
	if x != nil {
		return x.Sensors
	}
	return nil
}

// Navigator data for routes and distances.
type Snapshot_Navigator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes                 []*Snapshot_Navigator_Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	RouteIndex             int64                       `protobuf:"varint,2,opt,name=route_index,json=routeIndex,proto3" json:"route_index,omitempty"`
	TrackIndex             int64                       `protobuf:"varint,3,opt,name=track_index,json=trackIndex,proto3" json:"track_index,omitempty"`
	SegmentIndex           int64                       `protobuf:"varint,4,opt,name=segment_index,json=segmentIndex,proto3" json:"segment_index,omitempty"`
	CurrentSegmentDistance float64                     `protobuf:"fixed64,5,opt,name=current_segment_distance,json=currentSegmentDistance,proto3" json:"current_segment_distance,omitempty"`
	CurrentRouteDistance   float64                     `protobuf:"fixed64,6,opt,name=current_route_distance,json=currentRouteDistance,proto3" json:"current_route_distance,omitempty"`
	CurrentTrackDistance   float64                     `protobuf:"fixed64,7,opt,name=current_track_distance,json=currentTrackDistance,proto3" json:"current_track_distance,omitempty"`
	CurrentDistance        float64                     `protobuf:"fixed64,8,opt,name=current_distance,json=currentDistance,proto3" json:"current_distance,omitempty"`
	OfflineIndex           int64                       `protobuf:"varint,9,opt,name=offline_index,json=offlineIndex,proto3" json:"offline_index,omitempty"`
	Point                  *Snapshot_PointLatLon       `protobuf:"bytes,10,opt,name=point,proto3" json:"point,omitempty"`
	Elevation              *Snapshot_SensorType        `protobuf:"bytes,11,opt,name=elevation,proto3" json:"elevation,omitempty"`
	OfflineMin             int64                       `protobuf:"varint,12,opt,name=offline_min,json=offlineMin,proto3" json:"offline_min,omitempty"`
	OfflineMax             int64                       `protobuf:"varint,13,opt,name=offline_max,json=offlineMax,proto3" json:"offline_max,omitempty"`
	Distance               float64                     `protobuf:"fixed64,14,opt,name=distance,proto3" json:"distance,omitempty"`
	SkipOffline            bool                        `protobuf:"varint,15,opt,name=skip_offline,json=skipOffline,proto3" json:"skip_offline,omitempty"`
	Version                int64                       `protobuf:"varint,16,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Snapshot_Navigator) Reset() {
	*x = Snapshot_Navigator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Navigator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Navigator) ProtoMessage() {}

func (x *Snapshot_Navigator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Navigator.ProtoReflect.Descriptor instead.
func (*Snapshot_Navigator) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Snapshot_Navigator) GetRoutes() []*Snapshot_Navigator_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Snapshot_Navigator) GetRouteIndex() int64 {
	if x != nil {
		return x.RouteIndex
	}
	return 0
}

func (x *Snapshot_Navigator) GetTrackIndex() int64 {
	if x != nil {
		return x.TrackIndex
	}
	return 0
}

func (x *Snapshot_Navigator) GetSegmentIndex() int64 {
	if x != nil {
		return x.SegmentIndex
	}
	return 0
}

func (x *Snapshot_Navigator) GetCurrentSegmentDistance() float64 {
	if x != nil {
		return x.CurrentSegmentDistance
	}
	return 0
}

func (x *Snapshot_Navigator) GetCurrentRouteDistance() float64 {
	if x != nil {
		return x.CurrentRouteDistance
	}
	return 0
}

func (x *Snapshot_Navigator) GetCurrentTrackDistance() float64 {
	if x != nil {
		return x.CurrentTrackDistance
	}
	return 0
}

func (x *Snapshot_Navigator) GetCurrentDistance() float64 {
	if x != nil {
		return x.CurrentDistance
	}
	return 0
}

func (x *Snapshot_Navigator) GetOfflineIndex() int64 {
	if x != nil {
		return x.OfflineIndex
	}
	return 0
}

func (x *Snapshot_Navigator) GetPoint() *Snapshot_PointLatLon {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *Snapshot_Navigator) GetElevation() *Snapshot_SensorType {
	if x != nil {
		return x.Elevation
	}
	return nil
}

func (x *Snapshot_Navigator) GetOfflineMin() int64 {
	if x != nil {
		return x.OfflineMin
	}
	return 0
}

func (x *Snapshot_Navigator) GetOfflineMax() int64 {
	if x != nil {
		return x.OfflineMax
	}
	return 0
}

func (x *Snapshot_Navigator) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Snapshot_Navigator) GetSkipOffline() bool {
	if x != nil {
		return x.SkipOffline
	}
	return false
}

func (x *Snapshot_Navigator) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Individual point in the curve.
type Snapshot_Curve_Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"` // X-coordinate.
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"` // Y-coordinate.
}

func (x *Snapshot_Curve_Point) Reset() {
	*x = Snapshot_Curve_Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Curve_Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Curve_Point) ProtoMessage() {}

func (x *Snapshot_Curve_Point) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Curve_Point.ProtoReflect.Descriptor instead.
func (*Snapshot_Curve_Point) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Snapshot_Curve_Point) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Snapshot_Curve_Point) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

// Control points for the curve.
type Snapshot_Curve_ControlPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vp *Snapshot_Curve_Point `protobuf:"bytes,1,opt,name=vp,proto3" json:"vp,omitempty"` // Vertex point.
	Cp *Snapshot_Curve_Point `protobuf:"bytes,2,opt,name=cp,proto3" json:"cp,omitempty"` // Control point.
}

func (x *Snapshot_Curve_ControlPoint) Reset() {
	*x = Snapshot_Curve_ControlPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Curve_ControlPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Curve_ControlPoint) ProtoMessage() {}

func (x *Snapshot_Curve_ControlPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Curve_ControlPoint.ProtoReflect.Descriptor instead.
func (*Snapshot_Curve_ControlPoint) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Snapshot_Curve_ControlPoint) GetVp() *Snapshot_Curve_Point {
	if x != nil {
		return x.Vp
	}
	return nil
}

func (x *Snapshot_Curve_ControlPoint) GetCp() *Snapshot_Curve_Point {
	if x != nil {
		return x.Cp
	}
	return nil
}

type Snapshot_Navigator_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Distance float64                           `protobuf:"fixed64,2,opt,name=distance,proto3" json:"distance,omitempty"`
	Color    string                            `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Tracks   []*Snapshot_Navigator_Route_Track `protobuf:"bytes,4,rep,name=tracks,proto3" json:"tracks,omitempty"`
	Props    []byte                            `protobuf:"bytes,5,opt,name=props,proto3" json:"props,omitempty"`
	Name     string                            `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Version  int64                             `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Snapshot_Navigator_Route) Reset() {
	*x = Snapshot_Navigator_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Navigator_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Navigator_Route) ProtoMessage() {}

func (x *Snapshot_Navigator_Route) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Navigator_Route.ProtoReflect.Descriptor instead.
func (*Snapshot_Navigator_Route) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *Snapshot_Navigator_Route) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Snapshot_Navigator_Route) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Snapshot_Navigator_Route) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Snapshot_Navigator_Route) GetTracks() []*Snapshot_Navigator_Route_Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *Snapshot_Navigator_Route) GetProps() []byte {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Snapshot_Navigator_Route) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Snapshot_Navigator_Route) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Snapshot_Navigator_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*Snapshot_Navigator_Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Snapshot_Navigator_Routes) Reset() {
	*x = Snapshot_Navigator_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Navigator_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Navigator_Routes) ProtoMessage() {}

func (x *Snapshot_Navigator_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Navigator_Routes.ProtoReflect.Descriptor instead.
func (*Snapshot_Navigator_Routes) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 6, 1}
}

func (x *Snapshot_Navigator_Routes) GetRoutes() []*Snapshot_Navigator_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Snapshot_Navigator_Route_Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Segmenets []*Snapshot_Navigator_Route_Track_Segment `protobuf:"bytes,2,rep,name=segmenets,proto3" json:"segmenets,omitempty"`
	Color     string                                    `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Props     []byte                                    `protobuf:"bytes,4,opt,name=props,proto3" json:"props,omitempty"`
	Distance  float64                                   `protobuf:"fixed64,5,opt,name=distance,proto3" json:"distance,omitempty"`
	IsClosed  bool                                      `protobuf:"varint,6,opt,name=is_closed,json=isClosed,proto3" json:"is_closed,omitempty"`
	Name      string                                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Version   int64                                     `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Snapshot_Navigator_Route_Track) Reset() {
	*x = Snapshot_Navigator_Route_Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Navigator_Route_Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Navigator_Route_Track) ProtoMessage() {}

func (x *Snapshot_Navigator_Route_Track) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Navigator_Route_Track.ProtoReflect.Descriptor instead.
func (*Snapshot_Navigator_Route_Track) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 6, 0, 0}
}

func (x *Snapshot_Navigator_Route_Track) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Snapshot_Navigator_Route_Track) GetSegmenets() []*Snapshot_Navigator_Route_Track_Segment {
	if x != nil {
		return x.Segmenets
	}
	return nil
}

func (x *Snapshot_Navigator_Route_Track) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Snapshot_Navigator_Route_Track) GetProps() []byte {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Snapshot_Navigator_Route_Track) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Snapshot_Navigator_Route_Track) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *Snapshot_Navigator_Route_Track) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Snapshot_Navigator_Route_Track) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Snapshot_Navigator_Route_Track_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointA   *Snapshot_PointLatLon `protobuf:"bytes,1,opt,name=point_a,json=pointA,proto3" json:"point_a,omitempty"`
	PointB   *Snapshot_PointLatLon `protobuf:"bytes,2,opt,name=point_b,json=pointB,proto3" json:"point_b,omitempty"`
	Distance float64               `protobuf:"fixed64,3,opt,name=distance,proto3" json:"distance,omitempty"`
	Bearing  float64               `protobuf:"fixed64,4,opt,name=bearing,proto3" json:"bearing,omitempty"`
	Index    int64                 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	Rel      int64                 `protobuf:"varint,6,opt,name=rel,proto3" json:"rel,omitempty"`
}

func (x *Snapshot_Navigator_Route_Track_Segment) Reset() {
	*x = Snapshot_Navigator_Route_Track_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Navigator_Route_Track_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Navigator_Route_Track_Segment) ProtoMessage() {}

func (x *Snapshot_Navigator_Route_Track_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Navigator_Route_Track_Segment.ProtoReflect.Descriptor instead.
func (*Snapshot_Navigator_Route_Track_Segment) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0, 6, 0, 0, 0}
}

func (x *Snapshot_Navigator_Route_Track_Segment) GetPointA() *Snapshot_PointLatLon {
	if x != nil {
		return x.PointA
	}
	return nil
}

func (x *Snapshot_Navigator_Route_Track_Segment) GetPointB() *Snapshot_PointLatLon {
	if x != nil {
		return x.PointB
	}
	return nil
}

func (x *Snapshot_Navigator_Route_Track_Segment) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Snapshot_Navigator_Route_Track_Segment) GetBearing() float64 {
	if x != nil {
		return x.Bearing
	}
	return 0
}

func (x *Snapshot_Navigator_Route_Track_Segment) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Snapshot_Navigator_Route_Track_Segment) GetRel() int64 {
	if x != nil {
		return x.Rel
	}
	return 0
}

var File_proto_snapshot_proto protoreflect.FileDescriptor

var file_proto_snapshot_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x14,
	0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x73, 0x63, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x37, 0x0a,
	0x09, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12,
	0x34, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x1a, 0x31, 0x0a, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x61,
	0x74, 0x4c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x1a, 0x8a, 0x02, 0x0a, 0x05, 0x43, 0x75, 0x72,
	0x76, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a, 0x23, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x1a, 0x68, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x76,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x76, 0x70, 0x12, 0x2b, 0x0a, 0x02, 0x63, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x02, 0x63, 0x70, 0x1a, 0x6b, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x03, 0x67, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x52, 0x03, 0x67,
	0x65, 0x6e, 0x1a, 0x64, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0xa7, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x13, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x58,
	0x12, 0x13, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x5f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x76, 0x61, 0x6c, 0x59, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x67, 0x65, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x52, 0x03, 0x67,
	0x65, 0x6e, 0x1a, 0x3f, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x1a, 0x8b, 0x0b, 0x0a, 0x09, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x74,
	0x4c, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x9c, 0x05, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xcd,
	0x03, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xd3, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x74, 0x4c,
	0x6f, 0x6e, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x6c, 0x1a, 0x41,
	0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_snapshot_proto_rawDescOnce sync.Once
	file_proto_snapshot_proto_rawDescData = file_proto_snapshot_proto_rawDesc
)

func file_proto_snapshot_proto_rawDescGZIP() []byte {
	file_proto_snapshot_proto_rawDescOnce.Do(func() {
		file_proto_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_snapshot_proto_rawDescData)
	})
	return file_proto_snapshot_proto_rawDescData
}

var file_proto_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_snapshot_proto_goTypes = []interface{}{
	(*Snapshot)(nil),                               // 0: proto.Snapshot
	(*Snapshot_PointLatLon)(nil),                   // 1: proto.Snapshot.PointLatLon
	(*Snapshot_Curve)(nil),                         // 2: proto.Snapshot.Curve
	(*Snapshot_CommonType)(nil),                    // 3: proto.Snapshot.CommonType
	(*Snapshot_BatteryType)(nil),                   // 4: proto.Snapshot.BatteryType
	(*Snapshot_SensorType)(nil),                    // 5: proto.Snapshot.SensorType
	(*Snapshot_Sensors)(nil),                       // 6: proto.Snapshot.Sensors
	(*Snapshot_Navigator)(nil),                     // 7: proto.Snapshot.Navigator
	(*Snapshot_Curve_Point)(nil),                   // 8: proto.Snapshot.Curve.Point
	(*Snapshot_Curve_ControlPoint)(nil),            // 9: proto.Snapshot.Curve.ControlPoint
	(*Snapshot_Navigator_Route)(nil),               // 10: proto.Snapshot.Navigator.Route
	(*Snapshot_Navigator_Routes)(nil),              // 11: proto.Snapshot.Navigator.Routes
	(*Snapshot_Navigator_Route_Track)(nil),         // 12: proto.Snapshot.Navigator.Route.Track
	(*Snapshot_Navigator_Route_Track_Segment)(nil), // 13: proto.Snapshot.Navigator.Route.Track.Segment
}
var file_proto_snapshot_proto_depIdxs = []int32{
	7,  // 0: proto.Snapshot.navigator:type_name -> proto.Snapshot.Navigator
	3,  // 1: proto.Snapshot.speed:type_name -> proto.Snapshot.CommonType
	4,  // 2: proto.Snapshot.battery:type_name -> proto.Snapshot.BatteryType
	5,  // 3: proto.Snapshot.sensors:type_name -> proto.Snapshot.SensorType
	9,  // 4: proto.Snapshot.Curve.points:type_name -> proto.Snapshot.Curve.ControlPoint
	2,  // 5: proto.Snapshot.CommonType.gen:type_name -> proto.Snapshot.Curve
	2,  // 6: proto.Snapshot.SensorType.gen:type_name -> proto.Snapshot.Curve
	5,  // 7: proto.Snapshot.Sensors.sensors:type_name -> proto.Snapshot.SensorType
	10, // 8: proto.Snapshot.Navigator.routes:type_name -> proto.Snapshot.Navigator.Route
	1,  // 9: proto.Snapshot.Navigator.point:type_name -> proto.Snapshot.PointLatLon
	5,  // 10: proto.Snapshot.Navigator.elevation:type_name -> proto.Snapshot.SensorType
	8,  // 11: proto.Snapshot.Curve.ControlPoint.vp:type_name -> proto.Snapshot.Curve.Point
	8,  // 12: proto.Snapshot.Curve.ControlPoint.cp:type_name -> proto.Snapshot.Curve.Point
	12, // 13: proto.Snapshot.Navigator.Route.tracks:type_name -> proto.Snapshot.Navigator.Route.Track
	10, // 14: proto.Snapshot.Navigator.Routes.routes:type_name -> proto.Snapshot.Navigator.Route
	13, // 15: proto.Snapshot.Navigator.Route.Track.segmenets:type_name -> proto.Snapshot.Navigator.Route.Track.Segment
	1,  // 16: proto.Snapshot.Navigator.Route.Track.Segment.point_a:type_name -> proto.Snapshot.PointLatLon
	1,  // 17: proto.Snapshot.Navigator.Route.Track.Segment.point_b:type_name -> proto.Snapshot.PointLatLon
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_snapshot_proto_init() }
func file_proto_snapshot_proto_init() {
	if File_proto_snapshot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_snapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_PointLatLon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Curve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_CommonType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_BatteryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_SensorType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Sensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Navigator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Curve_Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Curve_ControlPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Navigator_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Navigator_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Navigator_Route_Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Navigator_Route_Track_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_snapshot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_snapshot_proto_goTypes,
		DependencyIndexes: file_proto_snapshot_proto_depIdxs,
		MessageInfos:      file_proto_snapshot_proto_msgTypes,
	}.Build()
	File_proto_snapshot_proto = out.File
	file_proto_snapshot_proto_rawDesc = nil
	file_proto_snapshot_proto_goTypes = nil
	file_proto_snapshot_proto_depIdxs = nil
}
