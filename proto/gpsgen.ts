// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "proto/gpsgen.proto" (package "proto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message proto.Device
 */
export interface Device {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: double tick = 3;
     */
    tick: number;
    /**
     * @generated from protobuf field: double duration = 4;
     */
    duration: number;
    /**
     * @generated from protobuf field: string model = 5;
     */
    model: string;
    /**
     * @generated from protobuf field: double speed = 6;
     */
    speed: number;
    /**
     * @generated from protobuf field: proto.Device.Distance distance = 7;
     */
    distance?: Device_Distance;
    /**
     * @generated from protobuf field: proto.Device.Battery battery = 8;
     */
    battery?: Device_Battery;
    /**
     * @generated from protobuf field: proto.Device.Routes routes = 9;
     */
    routes?: Device_Routes;
    /**
     * @generated from protobuf field: proto.Device.Location location = 10;
     */
    location?: Device_Location;
    /**
     * @generated from protobuf field: proto.Device.Navigator navigator = 11;
     */
    navigator?: Device_Navigator;
    /**
     * @generated from protobuf field: repeated proto.Device.Sensor sensors = 12;
     */
    sensors: Device_Sensor[];
    /**
     * @generated from protobuf field: string description = 14;
     */
    description: string;
    /**
     * @generated from protobuf field: bool is_offline = 15;
     */
    isOffline: boolean;
    /**
     * @generated from protobuf field: int64 offline_duration = 16;
     */
    offlineDuration: bigint;
    /**
     * @generated from protobuf field: string color = 17;
     */
    color: string;
    /**
     * @generated from protobuf field: double time_estimate = 18;
     */
    timeEstimate: number;
}
/**
 * @generated from protobuf message proto.Device.Battery
 */
export interface Device_Battery {
    /**
     * @generated from protobuf field: double charge = 1;
     */
    charge: number;
    /**
     * @generated from protobuf field: int64 charge_time = 2;
     */
    chargeTime: bigint;
}
/**
 * @generated from protobuf message proto.Device.Routes
 */
export interface Device_Routes {
    /**
     * @generated from protobuf field: repeated proto.Device.Routes.Route routes = 1;
     */
    routes: Device_Routes_Route[];
}
/**
 * @generated from protobuf message proto.Device.Routes.Route
 */
export interface Device_Routes_Route {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: repeated proto.Device.Routes.Route.Track tracks = 2;
     */
    tracks: Device_Routes_Route_Track[];
    /**
     * @generated from protobuf field: double distance = 3;
     */
    distance: number;
    /**
     * @generated from protobuf field: string color = 4;
     */
    color: string;
    /**
     * @generated from protobuf field: bytes props = 5;
     */
    props: Uint8Array;
    /**
     * @generated from protobuf field: int64 props_count = 6;
     */
    propsCount: bigint;
}
/**
 * @generated from protobuf message proto.Device.Routes.Route.Track
 */
export interface Device_Routes_Route_Track {
    /**
     * @generated from protobuf field: double distance = 1;
     */
    distance: number;
    /**
     * @generated from protobuf field: int64 num_segments = 2;
     */
    numSegments: bigint;
    /**
     * @generated from protobuf field: string color = 3;
     */
    color: string;
    /**
     * @generated from protobuf field: bytes props = 4;
     */
    props: Uint8Array;
    /**
     * @generated from protobuf field: int64 props_count = 5;
     */
    propsCount: bigint;
}
/**
 * @generated from protobuf message proto.Device.Sensor
 */
export interface Device_Sensor {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: double val_x = 3;
     */
    valX: number;
    /**
     * @generated from protobuf field: double val_y = 4;
     */
    valY: number;
}
/**
 * @generated from protobuf message proto.Device.Navigator
 */
export interface Device_Navigator {
    /**
     * @generated from protobuf field: int64 current_route_index = 1;
     */
    currentRouteIndex: bigint;
    /**
     * @generated from protobuf field: int64 current_track_index = 2;
     */
    currentTrackIndex: bigint;
    /**
     * @generated from protobuf field: int64 current_segment_index = 3;
     */
    currentSegmentIndex: bigint;
}
/**
 * @generated from protobuf message proto.Device.Distance
 */
export interface Device_Distance {
    /**
     * @generated from protobuf field: double distance = 1;
     */
    distance: number;
    /**
     * @generated from protobuf field: double current_distance = 2;
     */
    currentDistance: number;
    /**
     * @generated from protobuf field: double route_distance = 3;
     */
    routeDistance: number;
    /**
     * @generated from protobuf field: double current_route_distance = 4;
     */
    currentRouteDistance: number;
    /**
     * @generated from protobuf field: double track_distance = 5;
     */
    trackDistance: number;
    /**
     * @generated from protobuf field: double current_track_distance = 6;
     */
    currentTrackDistance: number;
    /**
     * @generated from protobuf field: double segment_distance = 7;
     */
    segmentDistance: number;
    /**
     * @generated from protobuf field: double current_segment_distance = 8;
     */
    currentSegmentDistance: number;
}
/**
 * @generated from protobuf message proto.Device.Location
 */
export interface Device_Location {
    /**
     * @generated from protobuf field: double lat = 1;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 2;
     */
    lon: number;
    /**
     * @generated from protobuf field: double elevation = 3;
     */
    elevation: number;
    /**
     * @generated from protobuf field: double bearing = 4;
     */
    bearing: number;
    /**
     * @generated from protobuf field: proto.Device.Location.DMS lat_dms = 12;
     */
    latDms?: Device_Location_DMS;
    /**
     * @generated from protobuf field: proto.Device.Location.DMS lon_dms = 13;
     */
    lonDms?: Device_Location_DMS;
    /**
     * @generated from protobuf field: proto.Device.Location.UTM utm = 14;
     */
    utm?: Device_Location_UTM;
}
/**
 * @generated from protobuf message proto.Device.Location.DMS
 */
export interface Device_Location_DMS {
    /**
     * @generated from protobuf field: int64 degrees = 1;
     */
    degrees: bigint;
    /**
     * @generated from protobuf field: int64 minutes = 2;
     */
    minutes: bigint;
    /**
     * @generated from protobuf field: double seconds = 3;
     */
    seconds: number;
    /**
     * @generated from protobuf field: string direction = 4;
     */
    direction: string;
}
/**
 * @generated from protobuf message proto.Device.Location.UTM
 */
export interface Device_Location_UTM {
    /**
     * @generated from protobuf field: double central_meridian = 1;
     */
    centralMeridian: number;
    /**
     * @generated from protobuf field: double easting = 2;
     */
    easting: number;
    /**
     * @generated from protobuf field: double northing = 3;
     */
    northing: number;
    /**
     * @generated from protobuf field: int64 long_zone = 4;
     */
    longZone: bigint;
    /**
     * @generated from protobuf field: string lat_zone = 5;
     */
    latZone: string;
    /**
     * @generated from protobuf field: string hemisphere = 6;
     */
    hemisphere: string;
    /**
     * @generated from protobuf field: int64 srid = 7;
     */
    srid: bigint;
}
/**
 * @generated from protobuf message proto.Packet
 */
export interface Packet {
    /**
     * @generated from protobuf field: repeated proto.Device devices = 1;
     */
    devices: Device[];
    /**
     * @generated from protobuf field: int64 timestamp = 2;
     */
    timestamp: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Device$Type extends MessageType<Device> {
    constructor() {
        super("proto.Device", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tick", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "duration", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "speed", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "distance", kind: "message", T: () => Device_Distance },
            { no: 8, name: "battery", kind: "message", T: () => Device_Battery },
            { no: 9, name: "routes", kind: "message", T: () => Device_Routes },
            { no: 10, name: "location", kind: "message", T: () => Device_Location },
            { no: 11, name: "navigator", kind: "message", T: () => Device_Navigator },
            { no: 12, name: "sensors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Device_Sensor },
            { no: 14, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "is_offline", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "offline_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "time_estimate", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Device>): Device {
        const message = { id: "", userId: "", tick: 0, duration: 0, model: "", speed: 0, sensors: [], description: "", isOffline: false, offlineDuration: 0n, color: "", timeEstimate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device): Device {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* double tick */ 3:
                    message.tick = reader.double();
                    break;
                case /* double duration */ 4:
                    message.duration = reader.double();
                    break;
                case /* string model */ 5:
                    message.model = reader.string();
                    break;
                case /* double speed */ 6:
                    message.speed = reader.double();
                    break;
                case /* proto.Device.Distance distance */ 7:
                    message.distance = Device_Distance.internalBinaryRead(reader, reader.uint32(), options, message.distance);
                    break;
                case /* proto.Device.Battery battery */ 8:
                    message.battery = Device_Battery.internalBinaryRead(reader, reader.uint32(), options, message.battery);
                    break;
                case /* proto.Device.Routes routes */ 9:
                    message.routes = Device_Routes.internalBinaryRead(reader, reader.uint32(), options, message.routes);
                    break;
                case /* proto.Device.Location location */ 10:
                    message.location = Device_Location.internalBinaryRead(reader, reader.uint32(), options, message.location);
                    break;
                case /* proto.Device.Navigator navigator */ 11:
                    message.navigator = Device_Navigator.internalBinaryRead(reader, reader.uint32(), options, message.navigator);
                    break;
                case /* repeated proto.Device.Sensor sensors */ 12:
                    message.sensors.push(Device_Sensor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string description */ 14:
                    message.description = reader.string();
                    break;
                case /* bool is_offline */ 15:
                    message.isOffline = reader.bool();
                    break;
                case /* int64 offline_duration */ 16:
                    message.offlineDuration = reader.int64().toBigInt();
                    break;
                case /* string color */ 17:
                    message.color = reader.string();
                    break;
                case /* double time_estimate */ 18:
                    message.timeEstimate = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* double tick = 3; */
        if (message.tick !== 0)
            writer.tag(3, WireType.Bit64).double(message.tick);
        /* double duration = 4; */
        if (message.duration !== 0)
            writer.tag(4, WireType.Bit64).double(message.duration);
        /* string model = 5; */
        if (message.model !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.model);
        /* double speed = 6; */
        if (message.speed !== 0)
            writer.tag(6, WireType.Bit64).double(message.speed);
        /* proto.Device.Distance distance = 7; */
        if (message.distance)
            Device_Distance.internalBinaryWrite(message.distance, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* proto.Device.Battery battery = 8; */
        if (message.battery)
            Device_Battery.internalBinaryWrite(message.battery, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* proto.Device.Routes routes = 9; */
        if (message.routes)
            Device_Routes.internalBinaryWrite(message.routes, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* proto.Device.Location location = 10; */
        if (message.location)
            Device_Location.internalBinaryWrite(message.location, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* proto.Device.Navigator navigator = 11; */
        if (message.navigator)
            Device_Navigator.internalBinaryWrite(message.navigator, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* repeated proto.Device.Sensor sensors = 12; */
        for (let i = 0; i < message.sensors.length; i++)
            Device_Sensor.internalBinaryWrite(message.sensors[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* string description = 14; */
        if (message.description !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.description);
        /* bool is_offline = 15; */
        if (message.isOffline !== false)
            writer.tag(15, WireType.Varint).bool(message.isOffline);
        /* int64 offline_duration = 16; */
        if (message.offlineDuration !== 0n)
            writer.tag(16, WireType.Varint).int64(message.offlineDuration);
        /* string color = 17; */
        if (message.color !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.color);
        /* double time_estimate = 18; */
        if (message.timeEstimate !== 0)
            writer.tag(18, WireType.Bit64).double(message.timeEstimate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Device
 */
export const Device = new Device$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Device_Battery$Type extends MessageType<Device_Battery> {
    constructor() {
        super("proto.Device.Battery", [
            { no: 1, name: "charge", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "charge_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Device_Battery>): Device_Battery {
        const message = { charge: 0, chargeTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device_Battery>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device_Battery): Device_Battery {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double charge */ 1:
                    message.charge = reader.double();
                    break;
                case /* int64 charge_time */ 2:
                    message.chargeTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device_Battery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double charge = 1; */
        if (message.charge !== 0)
            writer.tag(1, WireType.Bit64).double(message.charge);
        /* int64 charge_time = 2; */
        if (message.chargeTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.chargeTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Device.Battery
 */
export const Device_Battery = new Device_Battery$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Device_Routes$Type extends MessageType<Device_Routes> {
    constructor() {
        super("proto.Device.Routes", [
            { no: 1, name: "routes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Device_Routes_Route }
        ]);
    }
    create(value?: PartialMessage<Device_Routes>): Device_Routes {
        const message = { routes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device_Routes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device_Routes): Device_Routes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated proto.Device.Routes.Route routes */ 1:
                    message.routes.push(Device_Routes_Route.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device_Routes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated proto.Device.Routes.Route routes = 1; */
        for (let i = 0; i < message.routes.length; i++)
            Device_Routes_Route.internalBinaryWrite(message.routes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Device.Routes
 */
export const Device_Routes = new Device_Routes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Device_Routes_Route$Type extends MessageType<Device_Routes_Route> {
    constructor() {
        super("proto.Device.Routes.Route", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tracks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Device_Routes_Route_Track },
            { no: 3, name: "distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "props", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "props_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Device_Routes_Route>): Device_Routes_Route {
        const message = { id: "", tracks: [], distance: 0, color: "", props: new Uint8Array(0), propsCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device_Routes_Route>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device_Routes_Route): Device_Routes_Route {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* repeated proto.Device.Routes.Route.Track tracks */ 2:
                    message.tracks.push(Device_Routes_Route_Track.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* double distance */ 3:
                    message.distance = reader.double();
                    break;
                case /* string color */ 4:
                    message.color = reader.string();
                    break;
                case /* bytes props */ 5:
                    message.props = reader.bytes();
                    break;
                case /* int64 props_count */ 6:
                    message.propsCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device_Routes_Route, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* repeated proto.Device.Routes.Route.Track tracks = 2; */
        for (let i = 0; i < message.tracks.length; i++)
            Device_Routes_Route_Track.internalBinaryWrite(message.tracks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* double distance = 3; */
        if (message.distance !== 0)
            writer.tag(3, WireType.Bit64).double(message.distance);
        /* string color = 4; */
        if (message.color !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.color);
        /* bytes props = 5; */
        if (message.props.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.props);
        /* int64 props_count = 6; */
        if (message.propsCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.propsCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Device.Routes.Route
 */
export const Device_Routes_Route = new Device_Routes_Route$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Device_Routes_Route_Track$Type extends MessageType<Device_Routes_Route_Track> {
    constructor() {
        super("proto.Device.Routes.Route.Track", [
            { no: 1, name: "distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "num_segments", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "props", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "props_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Device_Routes_Route_Track>): Device_Routes_Route_Track {
        const message = { distance: 0, numSegments: 0n, color: "", props: new Uint8Array(0), propsCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device_Routes_Route_Track>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device_Routes_Route_Track): Device_Routes_Route_Track {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double distance */ 1:
                    message.distance = reader.double();
                    break;
                case /* int64 num_segments */ 2:
                    message.numSegments = reader.int64().toBigInt();
                    break;
                case /* string color */ 3:
                    message.color = reader.string();
                    break;
                case /* bytes props */ 4:
                    message.props = reader.bytes();
                    break;
                case /* int64 props_count */ 5:
                    message.propsCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device_Routes_Route_Track, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double distance = 1; */
        if (message.distance !== 0)
            writer.tag(1, WireType.Bit64).double(message.distance);
        /* int64 num_segments = 2; */
        if (message.numSegments !== 0n)
            writer.tag(2, WireType.Varint).int64(message.numSegments);
        /* string color = 3; */
        if (message.color !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.color);
        /* bytes props = 4; */
        if (message.props.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.props);
        /* int64 props_count = 5; */
        if (message.propsCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.propsCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Device.Routes.Route.Track
 */
export const Device_Routes_Route_Track = new Device_Routes_Route_Track$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Device_Sensor$Type extends MessageType<Device_Sensor> {
    constructor() {
        super("proto.Device.Sensor", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "val_x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "val_y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Device_Sensor>): Device_Sensor {
        const message = { id: "", name: "", valX: 0, valY: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device_Sensor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device_Sensor): Device_Sensor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* double val_x */ 3:
                    message.valX = reader.double();
                    break;
                case /* double val_y */ 4:
                    message.valY = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device_Sensor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* double val_x = 3; */
        if (message.valX !== 0)
            writer.tag(3, WireType.Bit64).double(message.valX);
        /* double val_y = 4; */
        if (message.valY !== 0)
            writer.tag(4, WireType.Bit64).double(message.valY);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Device.Sensor
 */
export const Device_Sensor = new Device_Sensor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Device_Navigator$Type extends MessageType<Device_Navigator> {
    constructor() {
        super("proto.Device.Navigator", [
            { no: 1, name: "current_route_index", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "current_track_index", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "current_segment_index", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Device_Navigator>): Device_Navigator {
        const message = { currentRouteIndex: 0n, currentTrackIndex: 0n, currentSegmentIndex: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device_Navigator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device_Navigator): Device_Navigator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 current_route_index */ 1:
                    message.currentRouteIndex = reader.int64().toBigInt();
                    break;
                case /* int64 current_track_index */ 2:
                    message.currentTrackIndex = reader.int64().toBigInt();
                    break;
                case /* int64 current_segment_index */ 3:
                    message.currentSegmentIndex = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device_Navigator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 current_route_index = 1; */
        if (message.currentRouteIndex !== 0n)
            writer.tag(1, WireType.Varint).int64(message.currentRouteIndex);
        /* int64 current_track_index = 2; */
        if (message.currentTrackIndex !== 0n)
            writer.tag(2, WireType.Varint).int64(message.currentTrackIndex);
        /* int64 current_segment_index = 3; */
        if (message.currentSegmentIndex !== 0n)
            writer.tag(3, WireType.Varint).int64(message.currentSegmentIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Device.Navigator
 */
export const Device_Navigator = new Device_Navigator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Device_Distance$Type extends MessageType<Device_Distance> {
    constructor() {
        super("proto.Device.Distance", [
            { no: 1, name: "distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "current_distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "route_distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "current_route_distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "track_distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "current_track_distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "segment_distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "current_segment_distance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Device_Distance>): Device_Distance {
        const message = { distance: 0, currentDistance: 0, routeDistance: 0, currentRouteDistance: 0, trackDistance: 0, currentTrackDistance: 0, segmentDistance: 0, currentSegmentDistance: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device_Distance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device_Distance): Device_Distance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double distance */ 1:
                    message.distance = reader.double();
                    break;
                case /* double current_distance */ 2:
                    message.currentDistance = reader.double();
                    break;
                case /* double route_distance */ 3:
                    message.routeDistance = reader.double();
                    break;
                case /* double current_route_distance */ 4:
                    message.currentRouteDistance = reader.double();
                    break;
                case /* double track_distance */ 5:
                    message.trackDistance = reader.double();
                    break;
                case /* double current_track_distance */ 6:
                    message.currentTrackDistance = reader.double();
                    break;
                case /* double segment_distance */ 7:
                    message.segmentDistance = reader.double();
                    break;
                case /* double current_segment_distance */ 8:
                    message.currentSegmentDistance = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device_Distance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double distance = 1; */
        if (message.distance !== 0)
            writer.tag(1, WireType.Bit64).double(message.distance);
        /* double current_distance = 2; */
        if (message.currentDistance !== 0)
            writer.tag(2, WireType.Bit64).double(message.currentDistance);
        /* double route_distance = 3; */
        if (message.routeDistance !== 0)
            writer.tag(3, WireType.Bit64).double(message.routeDistance);
        /* double current_route_distance = 4; */
        if (message.currentRouteDistance !== 0)
            writer.tag(4, WireType.Bit64).double(message.currentRouteDistance);
        /* double track_distance = 5; */
        if (message.trackDistance !== 0)
            writer.tag(5, WireType.Bit64).double(message.trackDistance);
        /* double current_track_distance = 6; */
        if (message.currentTrackDistance !== 0)
            writer.tag(6, WireType.Bit64).double(message.currentTrackDistance);
        /* double segment_distance = 7; */
        if (message.segmentDistance !== 0)
            writer.tag(7, WireType.Bit64).double(message.segmentDistance);
        /* double current_segment_distance = 8; */
        if (message.currentSegmentDistance !== 0)
            writer.tag(8, WireType.Bit64).double(message.currentSegmentDistance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Device.Distance
 */
export const Device_Distance = new Device_Distance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Device_Location$Type extends MessageType<Device_Location> {
    constructor() {
        super("proto.Device.Location", [
            { no: 1, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "elevation", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "bearing", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "lat_dms", kind: "message", T: () => Device_Location_DMS },
            { no: 13, name: "lon_dms", kind: "message", T: () => Device_Location_DMS },
            { no: 14, name: "utm", kind: "message", T: () => Device_Location_UTM }
        ]);
    }
    create(value?: PartialMessage<Device_Location>): Device_Location {
        const message = { lat: 0, lon: 0, elevation: 0, bearing: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device_Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device_Location): Device_Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double lat */ 1:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 2:
                    message.lon = reader.double();
                    break;
                case /* double elevation */ 3:
                    message.elevation = reader.double();
                    break;
                case /* double bearing */ 4:
                    message.bearing = reader.double();
                    break;
                case /* proto.Device.Location.DMS lat_dms */ 12:
                    message.latDms = Device_Location_DMS.internalBinaryRead(reader, reader.uint32(), options, message.latDms);
                    break;
                case /* proto.Device.Location.DMS lon_dms */ 13:
                    message.lonDms = Device_Location_DMS.internalBinaryRead(reader, reader.uint32(), options, message.lonDms);
                    break;
                case /* proto.Device.Location.UTM utm */ 14:
                    message.utm = Device_Location_UTM.internalBinaryRead(reader, reader.uint32(), options, message.utm);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device_Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double lat = 1; */
        if (message.lat !== 0)
            writer.tag(1, WireType.Bit64).double(message.lat);
        /* double lon = 2; */
        if (message.lon !== 0)
            writer.tag(2, WireType.Bit64).double(message.lon);
        /* double elevation = 3; */
        if (message.elevation !== 0)
            writer.tag(3, WireType.Bit64).double(message.elevation);
        /* double bearing = 4; */
        if (message.bearing !== 0)
            writer.tag(4, WireType.Bit64).double(message.bearing);
        /* proto.Device.Location.DMS lat_dms = 12; */
        if (message.latDms)
            Device_Location_DMS.internalBinaryWrite(message.latDms, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* proto.Device.Location.DMS lon_dms = 13; */
        if (message.lonDms)
            Device_Location_DMS.internalBinaryWrite(message.lonDms, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* proto.Device.Location.UTM utm = 14; */
        if (message.utm)
            Device_Location_UTM.internalBinaryWrite(message.utm, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Device.Location
 */
export const Device_Location = new Device_Location$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Device_Location_DMS$Type extends MessageType<Device_Location_DMS> {
    constructor() {
        super("proto.Device.Location.DMS", [
            { no: 1, name: "degrees", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "minutes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "seconds", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "direction", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Device_Location_DMS>): Device_Location_DMS {
        const message = { degrees: 0n, minutes: 0n, seconds: 0, direction: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device_Location_DMS>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device_Location_DMS): Device_Location_DMS {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 degrees */ 1:
                    message.degrees = reader.int64().toBigInt();
                    break;
                case /* int64 minutes */ 2:
                    message.minutes = reader.int64().toBigInt();
                    break;
                case /* double seconds */ 3:
                    message.seconds = reader.double();
                    break;
                case /* string direction */ 4:
                    message.direction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device_Location_DMS, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 degrees = 1; */
        if (message.degrees !== 0n)
            writer.tag(1, WireType.Varint).int64(message.degrees);
        /* int64 minutes = 2; */
        if (message.minutes !== 0n)
            writer.tag(2, WireType.Varint).int64(message.minutes);
        /* double seconds = 3; */
        if (message.seconds !== 0)
            writer.tag(3, WireType.Bit64).double(message.seconds);
        /* string direction = 4; */
        if (message.direction !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.direction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Device.Location.DMS
 */
export const Device_Location_DMS = new Device_Location_DMS$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Device_Location_UTM$Type extends MessageType<Device_Location_UTM> {
    constructor() {
        super("proto.Device.Location.UTM", [
            { no: 1, name: "central_meridian", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "easting", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "northing", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "long_zone", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "lat_zone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "hemisphere", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "srid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Device_Location_UTM>): Device_Location_UTM {
        const message = { centralMeridian: 0, easting: 0, northing: 0, longZone: 0n, latZone: "", hemisphere: "", srid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device_Location_UTM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device_Location_UTM): Device_Location_UTM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double central_meridian */ 1:
                    message.centralMeridian = reader.double();
                    break;
                case /* double easting */ 2:
                    message.easting = reader.double();
                    break;
                case /* double northing */ 3:
                    message.northing = reader.double();
                    break;
                case /* int64 long_zone */ 4:
                    message.longZone = reader.int64().toBigInt();
                    break;
                case /* string lat_zone */ 5:
                    message.latZone = reader.string();
                    break;
                case /* string hemisphere */ 6:
                    message.hemisphere = reader.string();
                    break;
                case /* int64 srid */ 7:
                    message.srid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device_Location_UTM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double central_meridian = 1; */
        if (message.centralMeridian !== 0)
            writer.tag(1, WireType.Bit64).double(message.centralMeridian);
        /* double easting = 2; */
        if (message.easting !== 0)
            writer.tag(2, WireType.Bit64).double(message.easting);
        /* double northing = 3; */
        if (message.northing !== 0)
            writer.tag(3, WireType.Bit64).double(message.northing);
        /* int64 long_zone = 4; */
        if (message.longZone !== 0n)
            writer.tag(4, WireType.Varint).int64(message.longZone);
        /* string lat_zone = 5; */
        if (message.latZone !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.latZone);
        /* string hemisphere = 6; */
        if (message.hemisphere !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.hemisphere);
        /* int64 srid = 7; */
        if (message.srid !== 0n)
            writer.tag(7, WireType.Varint).int64(message.srid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Device.Location.UTM
 */
export const Device_Location_UTM = new Device_Location_UTM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Packet$Type extends MessageType<Packet> {
    constructor() {
        super("proto.Packet", [
            { no: 1, name: "devices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Device },
            { no: 2, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Packet>): Packet {
        const message = { devices: [], timestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Packet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Packet): Packet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated proto.Device devices */ 1:
                    message.devices.push(Device.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 timestamp */ 2:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Packet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated proto.Device devices = 1; */
        for (let i = 0; i < message.devices.length; i++)
            Device.internalBinaryWrite(message.devices[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 timestamp = 2; */
        if (message.timestamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Packet
 */
export const Packet = new Packet$Type();
