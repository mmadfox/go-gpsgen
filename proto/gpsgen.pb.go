// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.9
// source: proto/gpsgen.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents information about a device.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                    // Device identifier.
	UserId          string            `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                              // User identifier.
	Tick            float64           `protobuf:"fixed64,3,opt,name=tick,proto3" json:"tick,omitempty"`                                              // Timestamp.
	Duration        float64           `protobuf:"fixed64,4,opt,name=duration,proto3" json:"duration,omitempty"`                                      // Duration of device operation.
	Model           string            `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`                                              // Device model.
	Speed           float64           `protobuf:"fixed64,6,opt,name=speed,proto3" json:"speed,omitempty"`                                            // Device speed.
	Distance        *Device_Distance  `protobuf:"bytes,7,opt,name=distance,proto3" json:"distance,omitempty"`                                        // Distance information.
	Battery         *Device_Battery   `protobuf:"bytes,8,opt,name=battery,proto3" json:"battery,omitempty"`                                          // Battery information.
	Routes          *Device_Routes    `protobuf:"bytes,9,opt,name=routes,proto3" json:"routes,omitempty"`                                            // Routes associated with the device.
	Location        *Device_Location  `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`                                       // Location information.
	Navigator       *Device_Navigator `protobuf:"bytes,11,opt,name=navigator,proto3" json:"navigator,omitempty"`                                     // Navigation data.
	Sensors         []*Device_Sensor  `protobuf:"bytes,12,rep,name=sensors,proto3" json:"sensors,omitempty"`                                         // List of sensors associated with the device.
	Description     string            `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`                                 // Device description.
	IsOffline       bool              `protobuf:"varint,15,opt,name=is_offline,json=isOffline,proto3" json:"is_offline,omitempty"`                   // Flag indicating if the device is offline.
	OfflineDuration int64             `protobuf:"varint,16,opt,name=offline_duration,json=offlineDuration,proto3" json:"offline_duration,omitempty"` // Duration of device offline mode.
	Color           string            `protobuf:"bytes,17,opt,name=color,proto3" json:"color,omitempty"`                                             // Device color.
	TimeEstimate    float64           `protobuf:"fixed64,18,opt,name=time_estimate,json=timeEstimate,proto3" json:"time_estimate,omitempty"`         // Estimated time.
	Units           *Device_Unit      `protobuf:"bytes,19,opt,name=units,proto3" json:"units,omitempty"`                                             // Device units.
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0}
}

func (x *Device) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Device) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *Device) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Device) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Device) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Device) GetDistance() *Device_Distance {
	if x != nil {
		return x.Distance
	}
	return nil
}

func (x *Device) GetBattery() *Device_Battery {
	if x != nil {
		return x.Battery
	}
	return nil
}

func (x *Device) GetRoutes() *Device_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Device) GetLocation() *Device_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Device) GetNavigator() *Device_Navigator {
	if x != nil {
		return x.Navigator
	}
	return nil
}

func (x *Device) GetSensors() []*Device_Sensor {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Device) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Device) GetIsOffline() bool {
	if x != nil {
		return x.IsOffline
	}
	return false
}

func (x *Device) GetOfflineDuration() int64 {
	if x != nil {
		return x.OfflineDuration
	}
	return 0
}

func (x *Device) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Device) GetTimeEstimate() float64 {
	if x != nil {
		return x.TimeEstimate
	}
	return 0
}

func (x *Device) GetUnits() *Device_Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

// Represents a packet of data containing device information.
type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices   []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`      // List of devices in the packet.
	Timestamp int64     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Timestamp for the packet.
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{1}
}

func (x *Packet) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Packet) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Battery information for the device.
type Device_Battery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charge     float64 `protobuf:"fixed64,1,opt,name=charge,proto3" json:"charge,omitempty"`                          // Battery charge level.
	ChargeTime int64   `protobuf:"varint,2,opt,name=charge_time,json=chargeTime,proto3" json:"charge_time,omitempty"` // Time taken to charge the battery.
}

func (x *Device_Battery) Reset() {
	*x = Device_Battery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Battery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Battery) ProtoMessage() {}

func (x *Device_Battery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Battery.ProtoReflect.Descriptor instead.
func (*Device_Battery) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Device_Battery) GetCharge() float64 {
	if x != nil {
		return x.Charge
	}
	return 0
}

func (x *Device_Battery) GetChargeTime() int64 {
	if x != nil {
		return x.ChargeTime
	}
	return 0
}

// Routes associated with the device.
type Device_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*Device_Routes_Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"` // List of routes.
}

func (x *Device_Routes) Reset() {
	*x = Device_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Routes) ProtoMessage() {}

func (x *Device_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Routes.ProtoReflect.Descriptor instead.
func (*Device_Routes) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Device_Routes) GetRoutes() []*Device_Routes_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

// Represents a sensor associated with the device.
type Device_Sensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                   // Sensor identifier.
	Name string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               // Sensor name.
	ValX float64 `protobuf:"fixed64,3,opt,name=val_x,json=valX,proto3" json:"val_x,omitempty"` // X-axis value of the sensor.
	ValY float64 `protobuf:"fixed64,4,opt,name=val_y,json=valY,proto3" json:"val_y,omitempty"` // Y-axis value of the sensor.
}

func (x *Device_Sensor) Reset() {
	*x = Device_Sensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Sensor) ProtoMessage() {}

func (x *Device_Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Sensor.ProtoReflect.Descriptor instead.
func (*Device_Sensor) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Device_Sensor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device_Sensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device_Sensor) GetValX() float64 {
	if x != nil {
		return x.ValX
	}
	return 0
}

func (x *Device_Sensor) GetValY() float64 {
	if x != nil {
		return x.ValY
	}
	return 0
}

// Represents navigation data for the device.
type Device_Navigator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentRouteIndex   int64 `protobuf:"varint,1,opt,name=current_route_index,json=currentRouteIndex,proto3" json:"current_route_index,omitempty"`       // Current route index.
	CurrentTrackIndex   int64 `protobuf:"varint,2,opt,name=current_track_index,json=currentTrackIndex,proto3" json:"current_track_index,omitempty"`       // Current track index.
	CurrentSegmentIndex int64 `protobuf:"varint,3,opt,name=current_segment_index,json=currentSegmentIndex,proto3" json:"current_segment_index,omitempty"` // Current segment index.
}

func (x *Device_Navigator) Reset() {
	*x = Device_Navigator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Navigator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Navigator) ProtoMessage() {}

func (x *Device_Navigator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Navigator.ProtoReflect.Descriptor instead.
func (*Device_Navigator) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Device_Navigator) GetCurrentRouteIndex() int64 {
	if x != nil {
		return x.CurrentRouteIndex
	}
	return 0
}

func (x *Device_Navigator) GetCurrentTrackIndex() int64 {
	if x != nil {
		return x.CurrentTrackIndex
	}
	return 0
}

func (x *Device_Navigator) GetCurrentSegmentIndex() int64 {
	if x != nil {
		return x.CurrentSegmentIndex
	}
	return 0
}

// Represents distance information.
type Device_Distance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distance               float64 `protobuf:"fixed64,1,opt,name=distance,proto3" json:"distance,omitempty"`                                                             // Total distance.
	CurrentDistance        float64 `protobuf:"fixed64,2,opt,name=current_distance,json=currentDistance,proto3" json:"current_distance,omitempty"`                        // Current distance.
	RouteDistance          float64 `protobuf:"fixed64,3,opt,name=route_distance,json=routeDistance,proto3" json:"route_distance,omitempty"`                              // Total route distance.
	CurrentRouteDistance   float64 `protobuf:"fixed64,4,opt,name=current_route_distance,json=currentRouteDistance,proto3" json:"current_route_distance,omitempty"`       // Current route distance.
	TrackDistance          float64 `protobuf:"fixed64,5,opt,name=track_distance,json=trackDistance,proto3" json:"track_distance,omitempty"`                              // Total track distance.
	CurrentTrackDistance   float64 `protobuf:"fixed64,6,opt,name=current_track_distance,json=currentTrackDistance,proto3" json:"current_track_distance,omitempty"`       // Current track distance.
	SegmentDistance        float64 `protobuf:"fixed64,7,opt,name=segment_distance,json=segmentDistance,proto3" json:"segment_distance,omitempty"`                        // Total segment distance.
	CurrentSegmentDistance float64 `protobuf:"fixed64,8,opt,name=current_segment_distance,json=currentSegmentDistance,proto3" json:"current_segment_distance,omitempty"` // Current segment distance.
}

func (x *Device_Distance) Reset() {
	*x = Device_Distance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Distance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Distance) ProtoMessage() {}

func (x *Device_Distance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Distance.ProtoReflect.Descriptor instead.
func (*Device_Distance) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Device_Distance) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Device_Distance) GetCurrentDistance() float64 {
	if x != nil {
		return x.CurrentDistance
	}
	return 0
}

func (x *Device_Distance) GetRouteDistance() float64 {
	if x != nil {
		return x.RouteDistance
	}
	return 0
}

func (x *Device_Distance) GetCurrentRouteDistance() float64 {
	if x != nil {
		return x.CurrentRouteDistance
	}
	return 0
}

func (x *Device_Distance) GetTrackDistance() float64 {
	if x != nil {
		return x.TrackDistance
	}
	return 0
}

func (x *Device_Distance) GetCurrentTrackDistance() float64 {
	if x != nil {
		return x.CurrentTrackDistance
	}
	return 0
}

func (x *Device_Distance) GetSegmentDistance() float64 {
	if x != nil {
		return x.SegmentDistance
	}
	return 0
}

func (x *Device_Distance) GetCurrentSegmentDistance() float64 {
	if x != nil {
		return x.CurrentSegmentDistance
	}
	return 0
}

// Represents location information.
type Device_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat       float64              `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`                    // Latitude.
	Lon       float64              `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`                    // Longitude.
	Elevation float64              `protobuf:"fixed64,3,opt,name=elevation,proto3" json:"elevation,omitempty"`        // Elevation above sea level.
	Bearing   float64              `protobuf:"fixed64,4,opt,name=bearing,proto3" json:"bearing,omitempty"`            // Bearing direction.
	LatDms    *Device_Location_DMS `protobuf:"bytes,12,opt,name=lat_dms,json=latDms,proto3" json:"lat_dms,omitempty"` // Latitude in degrees-minutes-seconds.
	LonDms    *Device_Location_DMS `protobuf:"bytes,13,opt,name=lon_dms,json=lonDms,proto3" json:"lon_dms,omitempty"` // Longitude in degrees-minutes-seconds.
	Utm       *Device_Location_UTM `protobuf:"bytes,14,opt,name=utm,proto3" json:"utm,omitempty"`                     // UTM coordinates.
}

func (x *Device_Location) Reset() {
	*x = Device_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Location) ProtoMessage() {}

func (x *Device_Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Location.ProtoReflect.Descriptor instead.
func (*Device_Location) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Device_Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Device_Location) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Device_Location) GetElevation() float64 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *Device_Location) GetBearing() float64 {
	if x != nil {
		return x.Bearing
	}
	return 0
}

func (x *Device_Location) GetLatDms() *Device_Location_DMS {
	if x != nil {
		return x.LatDms
	}
	return nil
}

func (x *Device_Location) GetLonDms() *Device_Location_DMS {
	if x != nil {
		return x.LonDms
	}
	return nil
}

func (x *Device_Location) GetUtm() *Device_Location_UTM {
	if x != nil {
		return x.Utm
	}
	return nil
}

type Device_Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distance  string `protobuf:"bytes,1,opt,name=distance,proto3" json:"distance,omitempty"`
	Speed     string `protobuf:"bytes,2,opt,name=speed,proto3" json:"speed,omitempty"`
	Time      string `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Elevation string `protobuf:"bytes,4,opt,name=elevation,proto3" json:"elevation,omitempty"`
}

func (x *Device_Unit) Reset() {
	*x = Device_Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Unit) ProtoMessage() {}

func (x *Device_Unit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Unit.ProtoReflect.Descriptor instead.
func (*Device_Unit) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Device_Unit) GetDistance() string {
	if x != nil {
		return x.Distance
	}
	return ""
}

func (x *Device_Unit) GetSpeed() string {
	if x != nil {
		return x.Speed
	}
	return ""
}

func (x *Device_Unit) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Device_Unit) GetElevation() string {
	if x != nil {
		return x.Elevation
	}
	return ""
}

// Represents a route within the routes.
type Device_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId    string                       `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`           // Route identifier.
	Tracks     []*Device_Routes_Route_Track `protobuf:"bytes,2,rep,name=tracks,proto3" json:"tracks,omitempty"`                            // Tracks within the route.
	Distance   float64                      `protobuf:"fixed64,3,opt,name=distance,proto3" json:"distance,omitempty"`                      // Total distance of the route.
	Color      string                       `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`                              // Color of the route.
	Props      []byte                       `protobuf:"bytes,5,opt,name=props,proto3" json:"props,omitempty"`                              // Additional properties of the route.
	PropsCount int64                        `protobuf:"varint,6,opt,name=props_count,json=propsCount,proto3" json:"props_count,omitempty"` // Number of additional properties.
}

func (x *Device_Routes_Route) Reset() {
	*x = Device_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Routes_Route) ProtoMessage() {}

func (x *Device_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Routes_Route.ProtoReflect.Descriptor instead.
func (*Device_Routes_Route) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Device_Routes_Route) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *Device_Routes_Route) GetTracks() []*Device_Routes_Route_Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *Device_Routes_Route) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Device_Routes_Route) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Device_Routes_Route) GetProps() []byte {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Device_Routes_Route) GetPropsCount() int64 {
	if x != nil {
		return x.PropsCount
	}
	return 0
}

// Represents a track within a route.
type Device_Routes_Route_Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId     string  `protobuf:"bytes,1,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`              // Track id
	Distance    float64 `protobuf:"fixed64,2,opt,name=distance,proto3" json:"distance,omitempty"`                         // Total distance of the track.
	NumSegments int64   `protobuf:"varint,3,opt,name=num_segments,json=numSegments,proto3" json:"num_segments,omitempty"` // Number of segments in the track.
	Color       string  `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`                                 // Color of the track.
	Props       []byte  `protobuf:"bytes,5,opt,name=props,proto3" json:"props,omitempty"`                                 // Additional properties of the track.
	PropsCount  int64   `protobuf:"varint,6,opt,name=props_count,json=propsCount,proto3" json:"props_count,omitempty"`    // Number of additional properties.
}

func (x *Device_Routes_Route_Track) Reset() {
	*x = Device_Routes_Route_Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Routes_Route_Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Routes_Route_Track) ProtoMessage() {}

func (x *Device_Routes_Route_Track) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Routes_Route_Track.ProtoReflect.Descriptor instead.
func (*Device_Routes_Route_Track) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Device_Routes_Route_Track) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

func (x *Device_Routes_Route_Track) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Device_Routes_Route_Track) GetNumSegments() int64 {
	if x != nil {
		return x.NumSegments
	}
	return 0
}

func (x *Device_Routes_Route_Track) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Device_Routes_Route_Track) GetProps() []byte {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Device_Routes_Route_Track) GetPropsCount() int64 {
	if x != nil {
		return x.PropsCount
	}
	return 0
}

// Represents degrees-minutes-seconds for latitude or longitude.
type Device_Location_DMS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Degrees   int64   `protobuf:"varint,1,opt,name=degrees,proto3" json:"degrees,omitempty"`    // Degrees.
	Minutes   int64   `protobuf:"varint,2,opt,name=minutes,proto3" json:"minutes,omitempty"`    // Minutes.
	Seconds   float64 `protobuf:"fixed64,3,opt,name=seconds,proto3" json:"seconds,omitempty"`   // Seconds.
	Direction string  `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"` // Direction (N/S/E/W).
}

func (x *Device_Location_DMS) Reset() {
	*x = Device_Location_DMS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Location_DMS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Location_DMS) ProtoMessage() {}

func (x *Device_Location_DMS) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Location_DMS.ProtoReflect.Descriptor instead.
func (*Device_Location_DMS) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *Device_Location_DMS) GetDegrees() int64 {
	if x != nil {
		return x.Degrees
	}
	return 0
}

func (x *Device_Location_DMS) GetMinutes() int64 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

func (x *Device_Location_DMS) GetSeconds() float64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Device_Location_DMS) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

// Represents Universal Transverse Mercator (UTM) coordinates.
type Device_Location_UTM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CentralMeridian float64 `protobuf:"fixed64,1,opt,name=central_meridian,json=centralMeridian,proto3" json:"central_meridian,omitempty"` // Central meridian.
	Easting         float64 `protobuf:"fixed64,2,opt,name=easting,proto3" json:"easting,omitempty"`                                        // Easting value.
	Northing        float64 `protobuf:"fixed64,3,opt,name=northing,proto3" json:"northing,omitempty"`                                      // Northing value.
	LongZone        int64   `protobuf:"varint,4,opt,name=long_zone,json=longZone,proto3" json:"long_zone,omitempty"`                       // Longitudinal zone.
	LatZone         string  `protobuf:"bytes,5,opt,name=lat_zone,json=latZone,proto3" json:"lat_zone,omitempty"`                           // Latitude zone.
	Hemisphere      string  `protobuf:"bytes,6,opt,name=hemisphere,proto3" json:"hemisphere,omitempty"`                                    // Hemisphere (N/S).
	Srid            int64   `protobuf:"varint,7,opt,name=srid,proto3" json:"srid,omitempty"`                                               // Spatial Reference Identifier.
}

func (x *Device_Location_UTM) Reset() {
	*x = Device_Location_UTM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gpsgen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Location_UTM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Location_UTM) ProtoMessage() {}

func (x *Device_Location_UTM) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gpsgen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Location_UTM.ProtoReflect.Descriptor instead.
func (*Device_Location_UTM) Descriptor() ([]byte, []int) {
	return file_proto_gpsgen_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *Device_Location_UTM) GetCentralMeridian() float64 {
	if x != nil {
		return x.CentralMeridian
	}
	return 0
}

func (x *Device_Location_UTM) GetEasting() float64 {
	if x != nil {
		return x.Easting
	}
	return 0
}

func (x *Device_Location_UTM) GetNorthing() float64 {
	if x != nil {
		return x.Northing
	}
	return 0
}

func (x *Device_Location_UTM) GetLongZone() int64 {
	if x != nil {
		return x.LongZone
	}
	return 0
}

func (x *Device_Location_UTM) GetLatZone() string {
	if x != nil {
		return x.LatZone
	}
	return ""
}

func (x *Device_Location_UTM) GetHemisphere() string {
	if x != nil {
		return x.Hemisphere
	}
	return ""
}

func (x *Device_Location_UTM) GetSrid() int64 {
	if x != nil {
		return x.Srid
	}
	return 0
}

var File_proto_gpsgen_proto protoreflect.FileDescriptor

var file_proto_gpsgen_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x70, 0x73, 0x67, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x13, 0x0a, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74,
	0x69, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x2f, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x12, 0x2c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x1a, 0x42, 0x0a, 0x07, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb5,
	0x03, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xf6, 0x02,
	0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xae, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x56, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x5f, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x58, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x5f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x59, 0x1a, 0x9f,
	0x01, 0x0a, 0x09, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x1a, 0xf0, 0x02, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x1a, 0xc6, 0x04, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x07,
	0x6c, 0x61, 0x74, 0x5f, 0x64, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x4d, 0x53, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x44, 0x6d,
	0x73, 0x12, 0x33, 0x0a, 0x07, 0x6c, 0x6f, 0x6e, 0x5f, 0x64, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x4d, 0x53, 0x52, 0x06,
	0x6c, 0x6f, 0x6e, 0x44, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x74, 0x6d, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x54, 0x4d, 0x52,
	0x03, 0x75, 0x74, 0x6d, 0x1a, 0x71, 0x0a, 0x03, 0x44, 0x4d, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd2, 0x01, 0x0a, 0x03, 0x55, 0x54, 0x4d, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x72, 0x69, 0x64,
	0x69, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x4d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x61,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x61, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x6d, 0x69,
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65,
	0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x72, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x72, 0x69, 0x64, 0x1a, 0x6a, 0x0a, 0x04,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_gpsgen_proto_rawDescOnce sync.Once
	file_proto_gpsgen_proto_rawDescData = file_proto_gpsgen_proto_rawDesc
)

func file_proto_gpsgen_proto_rawDescGZIP() []byte {
	file_proto_gpsgen_proto_rawDescOnce.Do(func() {
		file_proto_gpsgen_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_gpsgen_proto_rawDescData)
	})
	return file_proto_gpsgen_proto_rawDescData
}

var file_proto_gpsgen_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_gpsgen_proto_goTypes = []interface{}{
	(*Device)(nil),                    // 0: proto.Device
	(*Packet)(nil),                    // 1: proto.Packet
	(*Device_Battery)(nil),            // 2: proto.Device.Battery
	(*Device_Routes)(nil),             // 3: proto.Device.Routes
	(*Device_Sensor)(nil),             // 4: proto.Device.Sensor
	(*Device_Navigator)(nil),          // 5: proto.Device.Navigator
	(*Device_Distance)(nil),           // 6: proto.Device.Distance
	(*Device_Location)(nil),           // 7: proto.Device.Location
	(*Device_Unit)(nil),               // 8: proto.Device.Unit
	(*Device_Routes_Route)(nil),       // 9: proto.Device.Routes.Route
	(*Device_Routes_Route_Track)(nil), // 10: proto.Device.Routes.Route.Track
	(*Device_Location_DMS)(nil),       // 11: proto.Device.Location.DMS
	(*Device_Location_UTM)(nil),       // 12: proto.Device.Location.UTM
}
var file_proto_gpsgen_proto_depIdxs = []int32{
	6,  // 0: proto.Device.distance:type_name -> proto.Device.Distance
	2,  // 1: proto.Device.battery:type_name -> proto.Device.Battery
	3,  // 2: proto.Device.routes:type_name -> proto.Device.Routes
	7,  // 3: proto.Device.location:type_name -> proto.Device.Location
	5,  // 4: proto.Device.navigator:type_name -> proto.Device.Navigator
	4,  // 5: proto.Device.sensors:type_name -> proto.Device.Sensor
	8,  // 6: proto.Device.units:type_name -> proto.Device.Unit
	0,  // 7: proto.Packet.devices:type_name -> proto.Device
	9,  // 8: proto.Device.Routes.routes:type_name -> proto.Device.Routes.Route
	11, // 9: proto.Device.Location.lat_dms:type_name -> proto.Device.Location.DMS
	11, // 10: proto.Device.Location.lon_dms:type_name -> proto.Device.Location.DMS
	12, // 11: proto.Device.Location.utm:type_name -> proto.Device.Location.UTM
	10, // 12: proto.Device.Routes.Route.tracks:type_name -> proto.Device.Routes.Route.Track
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_gpsgen_proto_init() }
func file_proto_gpsgen_proto_init() {
	if File_proto_gpsgen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_gpsgen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Battery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Sensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Navigator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Distance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Routes_Route_Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Location_DMS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gpsgen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Location_UTM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_gpsgen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_gpsgen_proto_goTypes,
		DependencyIndexes: file_proto_gpsgen_proto_depIdxs,
		MessageInfos:      file_proto_gpsgen_proto_msgTypes,
	}.Build()
	File_proto_gpsgen_proto = out.File
	file_proto_gpsgen_proto_rawDesc = nil
	file_proto_gpsgen_proto_goTypes = nil
	file_proto_gpsgen_proto_depIdxs = nil
}
