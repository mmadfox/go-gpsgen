syntax = "proto3";

option go_package = "./proto";

package proto;

// Main message representing a snapshot of data.
message Snapshot {
    // Point with latitude and longitude.
    message PointLatLon {
        double lon = 1; // Longitude.
        double lat = 2; // Latitude.
    } // END POINT

    // Definition of a curve with control points.
    message Curve {
        // Individual point in the curve.
        message Point {
            double x = 1; // X-coordinate.
            double y = 2; // Y-coordinate.
        }
        
        // Control points for the curve.
        message ControlPoint {
            Point vp = 1; // Vertex point.
            Point cp = 2; // Control point.
        }

        repeated ControlPoint points = 1; // Control points of the curve.
        int64 mode = 2; // Mode of the curve.
        double min = 3; // Minimum value of the curve.
        double max = 4; // Maximum value of the curve.
    } // END CURVE

    // Common data type with a value and optional curve.
    message CommonType {
        double min = 1; // Minimum value.
        double max = 2; // Maximum value.
        double val = 3; // Actual value.
        Curve gen = 4; // Optional curve generator.
    }

    // Battery data type with charge time.
    message BatteryType {
        double min = 1; // Minimum value.
        double max = 2; // Maximum value.
        int64 charge_time = 4; // Charge time.
        double val = 5; // Actual value.
    }

    // Sensor data type with various properties.
    message SensorType {
        string id = 1; // Sensor identifier.
        double min = 2; // Minimum value.
        double max = 3; // Maximum value.
        double val_x = 4; // Value along X-axis.
        double val_y = 5; // Value along Y-axis.
        string name = 6; // Sensor name.
        Curve gen = 7; // Optional curve generator.
    }

    message Sensors {
        repeated SensorType sensors = 1;
    }

    // Navigator data for routes and distances.
    message Navigator {
        message Route {
            message Track {
                message Segment {
                    PointLatLon point_a = 1;
                    PointLatLon point_b = 2;
                    double distance = 3;
                    double bearing = 4;
                    int64 index = 5;
                    int64 rel = 6;
                } // END SEGMENT

                string id = 1;
                repeated Segment segmenets = 2;
                string color = 3;
                bytes props = 4;
                double distance = 5;
                bool is_closed = 6;
                string name = 7;
                int64 version = 9;
            } // END TRACK

            string id = 1;
            double distance = 2;
            string color = 3; 
            repeated Track tracks = 4;
            bytes props = 5; 
            string name = 6;
            int64 version = 7;
        } // END ROUTE

        message Routes {
            repeated Route routes = 1;
        }

        repeated Route routes = 1;
        int64 route_index = 2;
        int64 track_index = 3;
        int64 segment_index = 4;
        double current_segment_distance = 5;
        double current_route_distance = 6;
        double current_track_distance = 7;
        double current_distance = 8;
        int64 offline_index = 9; 
        PointLatLon point = 10;
        SensorType elevation = 11;
        int64 offline_min = 12; 
        int64 offline_max = 13;
        double distance = 14;
        bool skip_offline = 15;
        int64 version = 16;
    } // END NAVIGATOR

    string id = 1; // Snapshot identifier.
    string user_id = 2; // User identifier.
    double tick = 3; // Timestamp.
    double duration = 4; // Duration of the snapshot.
    string model = 5; // Model information.
    string descr = 6; // Description.
    int64 status = 7; // Status code.
    string color = 8; // Color information.
    Navigator navigator = 9; // Navigator data.
    CommonType speed = 10; // Speed information.
    BatteryType battery = 11; // Battery information.
    repeated SensorType sensors = 12; // Sensor information.
}
