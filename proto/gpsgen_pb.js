// source: proto/gpsgen.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.proto.Device', null, global);
goog.exportSymbol('proto.proto.Device.Battery', null, global);
goog.exportSymbol('proto.proto.Device.Distance', null, global);
goog.exportSymbol('proto.proto.Device.Location', null, global);
goog.exportSymbol('proto.proto.Device.Location.DMS', null, global);
goog.exportSymbol('proto.proto.Device.Location.UTM', null, global);
goog.exportSymbol('proto.proto.Device.Navigator', null, global);
goog.exportSymbol('proto.proto.Device.Routes', null, global);
goog.exportSymbol('proto.proto.Device.Routes.Route', null, global);
goog.exportSymbol('proto.proto.Device.Routes.Route.Track', null, global);
goog.exportSymbol('proto.proto.Device.Sensor', null, global);
goog.exportSymbol('proto.proto.Packet', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Device.repeatedFields_, null);
};
goog.inherits(proto.proto.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Device.displayName = 'proto.proto.Device';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Device.Battery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Device.Battery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Device.Battery.displayName = 'proto.proto.Device.Battery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Device.Routes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Device.Routes.repeatedFields_, null);
};
goog.inherits(proto.proto.Device.Routes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Device.Routes.displayName = 'proto.proto.Device.Routes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Device.Routes.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Device.Routes.Route.repeatedFields_, null);
};
goog.inherits(proto.proto.Device.Routes.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Device.Routes.Route.displayName = 'proto.proto.Device.Routes.Route';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Device.Routes.Route.Track = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Device.Routes.Route.Track, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Device.Routes.Route.Track.displayName = 'proto.proto.Device.Routes.Route.Track';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Device.Sensor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Device.Sensor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Device.Sensor.displayName = 'proto.proto.Device.Sensor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Device.Navigator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Device.Navigator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Device.Navigator.displayName = 'proto.proto.Device.Navigator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Device.Distance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Device.Distance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Device.Distance.displayName = 'proto.proto.Device.Distance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Device.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Device.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Device.Location.displayName = 'proto.proto.Device.Location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Device.Location.DMS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Device.Location.DMS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Device.Location.DMS.displayName = 'proto.proto.Device.Location.DMS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Device.Location.UTM = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Device.Location.UTM, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Device.Location.UTM.displayName = 'proto.proto.Device.Location.UTM';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Packet.repeatedFields_, null);
};
goog.inherits(proto.proto.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Packet.displayName = 'proto.proto.Packet';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Device.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tick: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    model: jspb.Message.getFieldWithDefault(msg, 5, ""),
    speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    distance: (f = msg.getDistance()) && proto.proto.Device.Distance.toObject(includeInstance, f),
    battery: (f = msg.getBattery()) && proto.proto.Device.Battery.toObject(includeInstance, f),
    routes: (f = msg.getRoutes()) && proto.proto.Device.Routes.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.proto.Device.Location.toObject(includeInstance, f),
    navigator: (f = msg.getNavigator()) && proto.proto.Device.Navigator.toObject(includeInstance, f),
    sensorsList: jspb.Message.toObjectList(msg.getSensorsList(),
    proto.proto.Device.Sensor.toObject, includeInstance),
    description: jspb.Message.getFieldWithDefault(msg, 14, ""),
    isOffline: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    offlineDuration: jspb.Message.getFieldWithDefault(msg, 16, 0),
    color: jspb.Message.getFieldWithDefault(msg, 17, ""),
    timeEstimate: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Device}
 */
proto.proto.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Device;
  return proto.proto.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Device}
 */
proto.proto.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTick(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDuration(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 7:
      var value = new proto.proto.Device.Distance;
      reader.readMessage(value,proto.proto.Device.Distance.deserializeBinaryFromReader);
      msg.setDistance(value);
      break;
    case 8:
      var value = new proto.proto.Device.Battery;
      reader.readMessage(value,proto.proto.Device.Battery.deserializeBinaryFromReader);
      msg.setBattery(value);
      break;
    case 9:
      var value = new proto.proto.Device.Routes;
      reader.readMessage(value,proto.proto.Device.Routes.deserializeBinaryFromReader);
      msg.setRoutes(value);
      break;
    case 10:
      var value = new proto.proto.Device.Location;
      reader.readMessage(value,proto.proto.Device.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 11:
      var value = new proto.proto.Device.Navigator;
      reader.readMessage(value,proto.proto.Device.Navigator.deserializeBinaryFromReader);
      msg.setNavigator(value);
      break;
    case 12:
      var value = new proto.proto.Device.Sensor;
      reader.readMessage(value,proto.proto.Device.Sensor.deserializeBinaryFromReader);
      msg.addSensors(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOffline(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOfflineDuration(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeEstimate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTick();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getDistance();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.proto.Device.Distance.serializeBinaryToWriter
    );
  }
  f = message.getBattery();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.proto.Device.Battery.serializeBinaryToWriter
    );
  }
  f = message.getRoutes();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.proto.Device.Routes.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.Device.Location.serializeBinaryToWriter
    );
  }
  f = message.getNavigator();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.Device.Navigator.serializeBinaryToWriter
    );
  }
  f = message.getSensorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.proto.Device.Sensor.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getIsOffline();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getOfflineDuration();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getTimeEstimate();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Device.Battery.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Device.Battery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Device.Battery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Battery.toObject = function(includeInstance, msg) {
  var f, obj = {
    charge: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    chargeTime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Device.Battery}
 */
proto.proto.Device.Battery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Device.Battery;
  return proto.proto.Device.Battery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Device.Battery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Device.Battery}
 */
proto.proto.Device.Battery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCharge(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChargeTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Device.Battery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Device.Battery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Device.Battery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Battery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharge();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getChargeTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional double charge = 1;
 * @return {number}
 */
proto.proto.Device.Battery.prototype.getCharge = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Battery} returns this
 */
proto.proto.Device.Battery.prototype.setCharge = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int64 charge_time = 2;
 * @return {number}
 */
proto.proto.Device.Battery.prototype.getChargeTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Battery} returns this
 */
proto.proto.Device.Battery.prototype.setChargeTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Device.Routes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Device.Routes.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Device.Routes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Device.Routes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Routes.toObject = function(includeInstance, msg) {
  var f, obj = {
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.proto.Device.Routes.Route.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Device.Routes}
 */
proto.proto.Device.Routes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Device.Routes;
  return proto.proto.Device.Routes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Device.Routes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Device.Routes}
 */
proto.proto.Device.Routes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Device.Routes.Route;
      reader.readMessage(value,proto.proto.Device.Routes.Route.deserializeBinaryFromReader);
      msg.addRoutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Device.Routes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Device.Routes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Device.Routes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Routes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Device.Routes.Route.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Device.Routes.Route.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Device.Routes.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Device.Routes.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Device.Routes.Route} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Routes.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    routeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tracksList: jspb.Message.toObjectList(msg.getTracksList(),
    proto.proto.Device.Routes.Route.Track.toObject, includeInstance),
    distance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    color: jspb.Message.getFieldWithDefault(msg, 4, ""),
    props: msg.getProps_asB64(),
    propsCount: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Device.Routes.Route}
 */
proto.proto.Device.Routes.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Device.Routes.Route;
  return proto.proto.Device.Routes.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Device.Routes.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Device.Routes.Route}
 */
proto.proto.Device.Routes.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteId(value);
      break;
    case 2:
      var value = new proto.proto.Device.Routes.Route.Track;
      reader.readMessage(value,proto.proto.Device.Routes.Route.Track.deserializeBinaryFromReader);
      msg.addTracks(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProps(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPropsCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Device.Routes.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Device.Routes.Route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Device.Routes.Route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Routes.Route.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRouteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.Device.Routes.Route.Track.serializeBinaryToWriter
    );
  }
  f = message.getDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProps_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getPropsCount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Device.Routes.Route.Track.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Device.Routes.Route.Track.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Device.Routes.Route.Track} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Routes.Route.Track.toObject = function(includeInstance, msg) {
  var f, obj = {
    trackId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    distance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    numSegments: jspb.Message.getFieldWithDefault(msg, 3, 0),
    color: jspb.Message.getFieldWithDefault(msg, 4, ""),
    props: msg.getProps_asB64(),
    propsCount: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Device.Routes.Route.Track}
 */
proto.proto.Device.Routes.Route.Track.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Device.Routes.Route.Track;
  return proto.proto.Device.Routes.Route.Track.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Device.Routes.Route.Track} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Device.Routes.Route.Track}
 */
proto.proto.Device.Routes.Route.Track.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumSegments(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProps(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPropsCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Device.Routes.Route.Track.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Device.Routes.Route.Track.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Device.Routes.Route.Track} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Routes.Route.Track.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrackId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getNumSegments();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProps_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getPropsCount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional string track_id = 1;
 * @return {string}
 */
proto.proto.Device.Routes.Route.Track.prototype.getTrackId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device.Routes.Route.Track} returns this
 */
proto.proto.Device.Routes.Route.Track.prototype.setTrackId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double distance = 2;
 * @return {number}
 */
proto.proto.Device.Routes.Route.Track.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Routes.Route.Track} returns this
 */
proto.proto.Device.Routes.Route.Track.prototype.setDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int64 num_segments = 3;
 * @return {number}
 */
proto.proto.Device.Routes.Route.Track.prototype.getNumSegments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Routes.Route.Track} returns this
 */
proto.proto.Device.Routes.Route.Track.prototype.setNumSegments = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string color = 4;
 * @return {string}
 */
proto.proto.Device.Routes.Route.Track.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device.Routes.Route.Track} returns this
 */
proto.proto.Device.Routes.Route.Track.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes props = 5;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Device.Routes.Route.Track.prototype.getProps = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes props = 5;
 * This is a type-conversion wrapper around `getProps()`
 * @return {string}
 */
proto.proto.Device.Routes.Route.Track.prototype.getProps_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProps()));
};


/**
 * optional bytes props = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProps()`
 * @return {!Uint8Array}
 */
proto.proto.Device.Routes.Route.Track.prototype.getProps_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProps()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Device.Routes.Route.Track} returns this
 */
proto.proto.Device.Routes.Route.Track.prototype.setProps = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional int64 props_count = 6;
 * @return {number}
 */
proto.proto.Device.Routes.Route.Track.prototype.getPropsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Routes.Route.Track} returns this
 */
proto.proto.Device.Routes.Route.Track.prototype.setPropsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string route_id = 1;
 * @return {string}
 */
proto.proto.Device.Routes.Route.prototype.getRouteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device.Routes.Route} returns this
 */
proto.proto.Device.Routes.Route.prototype.setRouteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Track tracks = 2;
 * @return {!Array<!proto.proto.Device.Routes.Route.Track>}
 */
proto.proto.Device.Routes.Route.prototype.getTracksList = function() {
  return /** @type{!Array<!proto.proto.Device.Routes.Route.Track>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Device.Routes.Route.Track, 2));
};


/**
 * @param {!Array<!proto.proto.Device.Routes.Route.Track>} value
 * @return {!proto.proto.Device.Routes.Route} returns this
*/
proto.proto.Device.Routes.Route.prototype.setTracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.Device.Routes.Route.Track=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Device.Routes.Route.Track}
 */
proto.proto.Device.Routes.Route.prototype.addTracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.Device.Routes.Route.Track, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Device.Routes.Route} returns this
 */
proto.proto.Device.Routes.Route.prototype.clearTracksList = function() {
  return this.setTracksList([]);
};


/**
 * optional double distance = 3;
 * @return {number}
 */
proto.proto.Device.Routes.Route.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Routes.Route} returns this
 */
proto.proto.Device.Routes.Route.prototype.setDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string color = 4;
 * @return {string}
 */
proto.proto.Device.Routes.Route.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device.Routes.Route} returns this
 */
proto.proto.Device.Routes.Route.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes props = 5;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Device.Routes.Route.prototype.getProps = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes props = 5;
 * This is a type-conversion wrapper around `getProps()`
 * @return {string}
 */
proto.proto.Device.Routes.Route.prototype.getProps_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProps()));
};


/**
 * optional bytes props = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProps()`
 * @return {!Uint8Array}
 */
proto.proto.Device.Routes.Route.prototype.getProps_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProps()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Device.Routes.Route} returns this
 */
proto.proto.Device.Routes.Route.prototype.setProps = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional int64 props_count = 6;
 * @return {number}
 */
proto.proto.Device.Routes.Route.prototype.getPropsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Routes.Route} returns this
 */
proto.proto.Device.Routes.Route.prototype.setPropsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated Route routes = 1;
 * @return {!Array<!proto.proto.Device.Routes.Route>}
 */
proto.proto.Device.Routes.prototype.getRoutesList = function() {
  return /** @type{!Array<!proto.proto.Device.Routes.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Device.Routes.Route, 1));
};


/**
 * @param {!Array<!proto.proto.Device.Routes.Route>} value
 * @return {!proto.proto.Device.Routes} returns this
*/
proto.proto.Device.Routes.prototype.setRoutesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Device.Routes.Route=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Device.Routes.Route}
 */
proto.proto.Device.Routes.prototype.addRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Device.Routes.Route, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Device.Routes} returns this
 */
proto.proto.Device.Routes.prototype.clearRoutesList = function() {
  return this.setRoutesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Device.Sensor.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Device.Sensor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Device.Sensor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Sensor.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    valX: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    valY: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Device.Sensor}
 */
proto.proto.Device.Sensor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Device.Sensor;
  return proto.proto.Device.Sensor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Device.Sensor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Device.Sensor}
 */
proto.proto.Device.Sensor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Device.Sensor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Device.Sensor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Device.Sensor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Sensor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValX();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getValY();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.Device.Sensor.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device.Sensor} returns this
 */
proto.proto.Device.Sensor.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.proto.Device.Sensor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device.Sensor} returns this
 */
proto.proto.Device.Sensor.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double val_x = 3;
 * @return {number}
 */
proto.proto.Device.Sensor.prototype.getValX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Sensor} returns this
 */
proto.proto.Device.Sensor.prototype.setValX = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double val_y = 4;
 * @return {number}
 */
proto.proto.Device.Sensor.prototype.getValY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Sensor} returns this
 */
proto.proto.Device.Sensor.prototype.setValY = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Device.Navigator.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Device.Navigator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Device.Navigator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Navigator.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentRouteIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    currentTrackIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentSegmentIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Device.Navigator}
 */
proto.proto.Device.Navigator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Device.Navigator;
  return proto.proto.Device.Navigator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Device.Navigator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Device.Navigator}
 */
proto.proto.Device.Navigator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentRouteIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentTrackIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentSegmentIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Device.Navigator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Device.Navigator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Device.Navigator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Navigator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentRouteIndex();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCurrentTrackIndex();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCurrentSegmentIndex();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 current_route_index = 1;
 * @return {number}
 */
proto.proto.Device.Navigator.prototype.getCurrentRouteIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Navigator} returns this
 */
proto.proto.Device.Navigator.prototype.setCurrentRouteIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 current_track_index = 2;
 * @return {number}
 */
proto.proto.Device.Navigator.prototype.getCurrentTrackIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Navigator} returns this
 */
proto.proto.Device.Navigator.prototype.setCurrentTrackIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 current_segment_index = 3;
 * @return {number}
 */
proto.proto.Device.Navigator.prototype.getCurrentSegmentIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Navigator} returns this
 */
proto.proto.Device.Navigator.prototype.setCurrentSegmentIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Device.Distance.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Device.Distance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Device.Distance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Distance.toObject = function(includeInstance, msg) {
  var f, obj = {
    distance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    currentDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    routeDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    currentRouteDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    trackDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    currentTrackDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    segmentDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    currentSegmentDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Device.Distance}
 */
proto.proto.Device.Distance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Device.Distance;
  return proto.proto.Device.Distance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Device.Distance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Device.Distance}
 */
proto.proto.Device.Distance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRouteDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentRouteDistance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrackDistance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentTrackDistance(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSegmentDistance(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentSegmentDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Device.Distance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Device.Distance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Device.Distance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Distance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getCurrentDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getRouteDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getCurrentRouteDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getTrackDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCurrentTrackDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getSegmentDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getCurrentSegmentDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional double distance = 1;
 * @return {number}
 */
proto.proto.Device.Distance.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Distance} returns this
 */
proto.proto.Device.Distance.prototype.setDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double current_distance = 2;
 * @return {number}
 */
proto.proto.Device.Distance.prototype.getCurrentDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Distance} returns this
 */
proto.proto.Device.Distance.prototype.setCurrentDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double route_distance = 3;
 * @return {number}
 */
proto.proto.Device.Distance.prototype.getRouteDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Distance} returns this
 */
proto.proto.Device.Distance.prototype.setRouteDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double current_route_distance = 4;
 * @return {number}
 */
proto.proto.Device.Distance.prototype.getCurrentRouteDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Distance} returns this
 */
proto.proto.Device.Distance.prototype.setCurrentRouteDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double track_distance = 5;
 * @return {number}
 */
proto.proto.Device.Distance.prototype.getTrackDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Distance} returns this
 */
proto.proto.Device.Distance.prototype.setTrackDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double current_track_distance = 6;
 * @return {number}
 */
proto.proto.Device.Distance.prototype.getCurrentTrackDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Distance} returns this
 */
proto.proto.Device.Distance.prototype.setCurrentTrackDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double segment_distance = 7;
 * @return {number}
 */
proto.proto.Device.Distance.prototype.getSegmentDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Distance} returns this
 */
proto.proto.Device.Distance.prototype.setSegmentDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double current_segment_distance = 8;
 * @return {number}
 */
proto.proto.Device.Distance.prototype.getCurrentSegmentDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Distance} returns this
 */
proto.proto.Device.Distance.prototype.setCurrentSegmentDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Device.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Device.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Device.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    elevation: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    bearing: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    latDms: (f = msg.getLatDms()) && proto.proto.Device.Location.DMS.toObject(includeInstance, f),
    lonDms: (f = msg.getLonDms()) && proto.proto.Device.Location.DMS.toObject(includeInstance, f),
    utm: (f = msg.getUtm()) && proto.proto.Device.Location.UTM.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Device.Location}
 */
proto.proto.Device.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Device.Location;
  return proto.proto.Device.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Device.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Device.Location}
 */
proto.proto.Device.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLon(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setElevation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBearing(value);
      break;
    case 12:
      var value = new proto.proto.Device.Location.DMS;
      reader.readMessage(value,proto.proto.Device.Location.DMS.deserializeBinaryFromReader);
      msg.setLatDms(value);
      break;
    case 13:
      var value = new proto.proto.Device.Location.DMS;
      reader.readMessage(value,proto.proto.Device.Location.DMS.deserializeBinaryFromReader);
      msg.setLonDms(value);
      break;
    case 14:
      var value = new proto.proto.Device.Location.UTM;
      reader.readMessage(value,proto.proto.Device.Location.UTM.deserializeBinaryFromReader);
      msg.setUtm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Device.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Device.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Device.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getElevation();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getBearing();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getLatDms();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.proto.Device.Location.DMS.serializeBinaryToWriter
    );
  }
  f = message.getLonDms();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.Device.Location.DMS.serializeBinaryToWriter
    );
  }
  f = message.getUtm();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.proto.Device.Location.UTM.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Device.Location.DMS.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Device.Location.DMS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Device.Location.DMS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Location.DMS.toObject = function(includeInstance, msg) {
  var f, obj = {
    degrees: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minutes: jspb.Message.getFieldWithDefault(msg, 2, 0),
    seconds: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    direction: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Device.Location.DMS}
 */
proto.proto.Device.Location.DMS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Device.Location.DMS;
  return proto.proto.Device.Location.DMS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Device.Location.DMS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Device.Location.DMS}
 */
proto.proto.Device.Location.DMS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDegrees(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinutes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSeconds(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Device.Location.DMS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Device.Location.DMS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Device.Location.DMS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Location.DMS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDegrees();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMinutes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSeconds();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 degrees = 1;
 * @return {number}
 */
proto.proto.Device.Location.DMS.prototype.getDegrees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location.DMS} returns this
 */
proto.proto.Device.Location.DMS.prototype.setDegrees = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 minutes = 2;
 * @return {number}
 */
proto.proto.Device.Location.DMS.prototype.getMinutes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location.DMS} returns this
 */
proto.proto.Device.Location.DMS.prototype.setMinutes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double seconds = 3;
 * @return {number}
 */
proto.proto.Device.Location.DMS.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location.DMS} returns this
 */
proto.proto.Device.Location.DMS.prototype.setSeconds = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string direction = 4;
 * @return {string}
 */
proto.proto.Device.Location.DMS.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device.Location.DMS} returns this
 */
proto.proto.Device.Location.DMS.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Device.Location.UTM.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Device.Location.UTM.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Device.Location.UTM} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Location.UTM.toObject = function(includeInstance, msg) {
  var f, obj = {
    centralMeridian: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    easting: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    northing: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    longZone: jspb.Message.getFieldWithDefault(msg, 4, 0),
    latZone: jspb.Message.getFieldWithDefault(msg, 5, ""),
    hemisphere: jspb.Message.getFieldWithDefault(msg, 6, ""),
    srid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Device.Location.UTM}
 */
proto.proto.Device.Location.UTM.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Device.Location.UTM;
  return proto.proto.Device.Location.UTM.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Device.Location.UTM} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Device.Location.UTM}
 */
proto.proto.Device.Location.UTM.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCentralMeridian(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEasting(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNorthing(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLongZone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatZone(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHemisphere(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSrid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Device.Location.UTM.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Device.Location.UTM.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Device.Location.UTM} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Device.Location.UTM.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCentralMeridian();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getEasting();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getNorthing();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getLongZone();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLatZone();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHemisphere();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSrid();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional double central_meridian = 1;
 * @return {number}
 */
proto.proto.Device.Location.UTM.prototype.getCentralMeridian = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location.UTM} returns this
 */
proto.proto.Device.Location.UTM.prototype.setCentralMeridian = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double easting = 2;
 * @return {number}
 */
proto.proto.Device.Location.UTM.prototype.getEasting = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location.UTM} returns this
 */
proto.proto.Device.Location.UTM.prototype.setEasting = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double northing = 3;
 * @return {number}
 */
proto.proto.Device.Location.UTM.prototype.getNorthing = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location.UTM} returns this
 */
proto.proto.Device.Location.UTM.prototype.setNorthing = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int64 long_zone = 4;
 * @return {number}
 */
proto.proto.Device.Location.UTM.prototype.getLongZone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location.UTM} returns this
 */
proto.proto.Device.Location.UTM.prototype.setLongZone = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string lat_zone = 5;
 * @return {string}
 */
proto.proto.Device.Location.UTM.prototype.getLatZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device.Location.UTM} returns this
 */
proto.proto.Device.Location.UTM.prototype.setLatZone = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string hemisphere = 6;
 * @return {string}
 */
proto.proto.Device.Location.UTM.prototype.getHemisphere = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device.Location.UTM} returns this
 */
proto.proto.Device.Location.UTM.prototype.setHemisphere = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 srid = 7;
 * @return {number}
 */
proto.proto.Device.Location.UTM.prototype.getSrid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location.UTM} returns this
 */
proto.proto.Device.Location.UTM.prototype.setSrid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional double lat = 1;
 * @return {number}
 */
proto.proto.Device.Location.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location} returns this
 */
proto.proto.Device.Location.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double lon = 2;
 * @return {number}
 */
proto.proto.Device.Location.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location} returns this
 */
proto.proto.Device.Location.prototype.setLon = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double elevation = 3;
 * @return {number}
 */
proto.proto.Device.Location.prototype.getElevation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location} returns this
 */
proto.proto.Device.Location.prototype.setElevation = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double bearing = 4;
 * @return {number}
 */
proto.proto.Device.Location.prototype.getBearing = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device.Location} returns this
 */
proto.proto.Device.Location.prototype.setBearing = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional DMS lat_dms = 12;
 * @return {?proto.proto.Device.Location.DMS}
 */
proto.proto.Device.Location.prototype.getLatDms = function() {
  return /** @type{?proto.proto.Device.Location.DMS} */ (
    jspb.Message.getWrapperField(this, proto.proto.Device.Location.DMS, 12));
};


/**
 * @param {?proto.proto.Device.Location.DMS|undefined} value
 * @return {!proto.proto.Device.Location} returns this
*/
proto.proto.Device.Location.prototype.setLatDms = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Device.Location} returns this
 */
proto.proto.Device.Location.prototype.clearLatDms = function() {
  return this.setLatDms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Device.Location.prototype.hasLatDms = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional DMS lon_dms = 13;
 * @return {?proto.proto.Device.Location.DMS}
 */
proto.proto.Device.Location.prototype.getLonDms = function() {
  return /** @type{?proto.proto.Device.Location.DMS} */ (
    jspb.Message.getWrapperField(this, proto.proto.Device.Location.DMS, 13));
};


/**
 * @param {?proto.proto.Device.Location.DMS|undefined} value
 * @return {!proto.proto.Device.Location} returns this
*/
proto.proto.Device.Location.prototype.setLonDms = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Device.Location} returns this
 */
proto.proto.Device.Location.prototype.clearLonDms = function() {
  return this.setLonDms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Device.Location.prototype.hasLonDms = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional UTM utm = 14;
 * @return {?proto.proto.Device.Location.UTM}
 */
proto.proto.Device.Location.prototype.getUtm = function() {
  return /** @type{?proto.proto.Device.Location.UTM} */ (
    jspb.Message.getWrapperField(this, proto.proto.Device.Location.UTM, 14));
};


/**
 * @param {?proto.proto.Device.Location.UTM|undefined} value
 * @return {!proto.proto.Device.Location} returns this
*/
proto.proto.Device.Location.prototype.setUtm = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Device.Location} returns this
 */
proto.proto.Device.Location.prototype.clearUtm = function() {
  return this.setUtm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Device.Location.prototype.hasUtm = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.Device.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.proto.Device.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double tick = 3;
 * @return {number}
 */
proto.proto.Device.prototype.getTick = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.setTick = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double duration = 4;
 * @return {number}
 */
proto.proto.Device.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.setDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string model = 5;
 * @return {string}
 */
proto.proto.Device.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double speed = 6;
 * @return {number}
 */
proto.proto.Device.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional Distance distance = 7;
 * @return {?proto.proto.Device.Distance}
 */
proto.proto.Device.prototype.getDistance = function() {
  return /** @type{?proto.proto.Device.Distance} */ (
    jspb.Message.getWrapperField(this, proto.proto.Device.Distance, 7));
};


/**
 * @param {?proto.proto.Device.Distance|undefined} value
 * @return {!proto.proto.Device} returns this
*/
proto.proto.Device.prototype.setDistance = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.clearDistance = function() {
  return this.setDistance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Device.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Battery battery = 8;
 * @return {?proto.proto.Device.Battery}
 */
proto.proto.Device.prototype.getBattery = function() {
  return /** @type{?proto.proto.Device.Battery} */ (
    jspb.Message.getWrapperField(this, proto.proto.Device.Battery, 8));
};


/**
 * @param {?proto.proto.Device.Battery|undefined} value
 * @return {!proto.proto.Device} returns this
*/
proto.proto.Device.prototype.setBattery = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.clearBattery = function() {
  return this.setBattery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Device.prototype.hasBattery = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Routes routes = 9;
 * @return {?proto.proto.Device.Routes}
 */
proto.proto.Device.prototype.getRoutes = function() {
  return /** @type{?proto.proto.Device.Routes} */ (
    jspb.Message.getWrapperField(this, proto.proto.Device.Routes, 9));
};


/**
 * @param {?proto.proto.Device.Routes|undefined} value
 * @return {!proto.proto.Device} returns this
*/
proto.proto.Device.prototype.setRoutes = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.clearRoutes = function() {
  return this.setRoutes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Device.prototype.hasRoutes = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Location location = 10;
 * @return {?proto.proto.Device.Location}
 */
proto.proto.Device.prototype.getLocation = function() {
  return /** @type{?proto.proto.Device.Location} */ (
    jspb.Message.getWrapperField(this, proto.proto.Device.Location, 10));
};


/**
 * @param {?proto.proto.Device.Location|undefined} value
 * @return {!proto.proto.Device} returns this
*/
proto.proto.Device.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Device.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Navigator navigator = 11;
 * @return {?proto.proto.Device.Navigator}
 */
proto.proto.Device.prototype.getNavigator = function() {
  return /** @type{?proto.proto.Device.Navigator} */ (
    jspb.Message.getWrapperField(this, proto.proto.Device.Navigator, 11));
};


/**
 * @param {?proto.proto.Device.Navigator|undefined} value
 * @return {!proto.proto.Device} returns this
*/
proto.proto.Device.prototype.setNavigator = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.clearNavigator = function() {
  return this.setNavigator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Device.prototype.hasNavigator = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated Sensor sensors = 12;
 * @return {!Array<!proto.proto.Device.Sensor>}
 */
proto.proto.Device.prototype.getSensorsList = function() {
  return /** @type{!Array<!proto.proto.Device.Sensor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Device.Sensor, 12));
};


/**
 * @param {!Array<!proto.proto.Device.Sensor>} value
 * @return {!proto.proto.Device} returns this
*/
proto.proto.Device.prototype.setSensorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.proto.Device.Sensor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Device.Sensor}
 */
proto.proto.Device.prototype.addSensors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.proto.Device.Sensor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.clearSensorsList = function() {
  return this.setSensorsList([]);
};


/**
 * optional string description = 14;
 * @return {string}
 */
proto.proto.Device.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bool is_offline = 15;
 * @return {boolean}
 */
proto.proto.Device.prototype.getIsOffline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.setIsOffline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional int64 offline_duration = 16;
 * @return {number}
 */
proto.proto.Device.prototype.getOfflineDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.setOfflineDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string color = 17;
 * @return {string}
 */
proto.proto.Device.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional double time_estimate = 18;
 * @return {number}
 */
proto.proto.Device.prototype.getTimeEstimate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Device} returns this
 */
proto.proto.Device.prototype.setTimeEstimate = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Packet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.proto.Device.toObject, includeInstance),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Packet}
 */
proto.proto.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Packet;
  return proto.proto.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Packet}
 */
proto.proto.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Device;
      reader.readMessage(value,proto.proto.Device.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Device.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated Device devices = 1;
 * @return {!Array<!proto.proto.Device>}
 */
proto.proto.Packet.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.proto.Device>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Device, 1));
};


/**
 * @param {!Array<!proto.proto.Device>} value
 * @return {!proto.proto.Packet} returns this
*/
proto.proto.Packet.prototype.setDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Device=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Device}
 */
proto.proto.Packet.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Device, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.proto.Packet.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.proto);
