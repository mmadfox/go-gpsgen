package route

import (
	"fmt"
	"math/rand"
	"time"

	"github.com/mmadfox/go-gpsgen/navigator"
	"github.com/mmadfox/go-gpsgen/random"
)

var randRoute = rand.New(rand.NewSource(time.Now().UnixNano()))

// RoutesForAngola generates three random routes for the country Angola.
// It returns the generated routes and any error encountered during the process.
func RoutesForAngola() ([]*navigator.Route, error) {
	return routesFor(Angola)
}

// RoutesForSouthArabia generates three random routes for the country SouthArabia.
// It returns the generated routes and any error encountered during the process.
func RoutesForSouthArabia() ([]*navigator.Route, error) {
	return routesFor(SouthArabia)
}

// RoutesForTurkey generates three random routes for the country Turkey.
// It returns the generated routes and any error encountered during the process.
func RoutesForTurkey() ([]*navigator.Route, error) {
	return routesFor(Turkey)
}

// RoutesForRussia generates three random routes for the country Russia.
// It returns the generated routes and any error encountered during the process.
func RoutesForRussia() ([]*navigator.Route, error) {
	return routesFor(Russia)
}

// RoutesForFrance generates three random routes for the country France.
// It returns the generated routes and any error encountered during the process.
func RoutesForFrance() ([]*navigator.Route, error) {
	return routesFor(France)
}

// RoutesForSpain generates three random routes for the country Spain.
// It returns the generated routes and any error encountered during the process.
func RoutesForSpain() ([]*navigator.Route, error) {
	return routesFor(Spain)
}

// RoutesForChina generates three random routes for the country China.
// It returns the generated routes and any error encountered during the process.
func RoutesForChina() ([]*navigator.Route, error) {
	return routesFor(China)
}

// Generate randomly selects a country from the list of countries and calls the generate function
// to generate a random route for that country. It returns the generated route and any error encountered.
func Generate() (*navigator.Route, error) {
	country := countries[randRoute.Intn(len(countries))]
	return generate(country)
}

// GenerateFor takes a country as a parameter and
// calls the generate a single route for the specified country.
func GenerateFor(c Country) (*navigator.Route, error) {
	return generate(c)
}

func routesFor(c Country) ([]*navigator.Route, error) {
	r1, err := GenerateFor(c)
	if err != nil {
		return nil, err
	}
	r2, err := GenerateFor(c)
	if err != nil {
		return nil, err
	}
	r3, err := GenerateFor(c)
	if err != nil {
		return nil, err
	}
	return []*navigator.Route{r1, r2, r3}, nil
}

func generate(country Country) (*navigator.Route, error) {
	points, ok := defaultPoints[country]
	if !ok {
		return nil, fmt.Errorf("no data for specified country")
	}
	point := points[randRoute.Intn(len(points))]
	polygon := random.Polygon(32, 7)
	routePath := navigator.NormalizeCoordinates(point[1], point[0], polygon)
	return navigator.NewRoute([][]navigator.Point{routePath})
}

// lon, lat
var defaultPoints = map[Country][][2]float64{
	Angola: {
		{18.63022908789509, -13.90498619985307},
		{17.233136119055615, -12.865527662701936},
		{18.811343960880862, -12.503856431964635},
		{16.894192153025216, -11.322398567271392},
		{18.472399994851713, -11.602678242257241},
		{17.233136119055615, -11.820479446282263},
		{17.995760042621555, -12.813891904298103},
		{18.906671951327382, -12.906828620427689},
		{16.07860823476716, -13.020371021549153},
		{16.099792232643722, -12.317655799643674},
		{16.036240239012756, -11.17695977433489},
		{17.074256134979322, -10.386184733468284},
		{17.74155206810002, -10.67776396874548},
		{18.46180799591278, -10.7089881512821},
		{19.107919931156886, -11.779006759049977},
	},

	SouthArabia: {
		{46.47772916557665, 24.829331135091678},
		{46.720538100189, 24.565001484716106},
		{46.7077023855839, 24.783696641649342},
		{46.845686317588616, 24.706954041911416},
		{46.65849881293158, 24.73027325886339},
		{46.87991488986938, 24.485204082466993},
		{46.539768452834096, 24.665162857629824},
		{46.649941669861136, 24.8895041100875},
		{46.82643274568133, 24.895325746806677},
		{46.97725239229024, 24.812826981121447},
		{46.41034166389983, 24.740959772835183},
		{46.74620952939935, 24.484230630588343},
		{46.42959523580808, 24.63599792393589},
		{46.976182749406576, 24.767186412753304},
		{46.96655596345346, 24.617523276734232},
	},

	Turkey: {
		{35.46621222115965, 38.97441071894664},
		{35.107096302780576, 39.3148157761608},
		{35.61916900120963, 38.46592897040088},
		{34.654876257416504, 38.72581049353295},
		{36.2974990692573, 39.46386672300645},
		{36.417204375382624, 38.808773759979545},
		{35.013992175794044, 38.29389217743616},
		{34.41546564516426, 39.34053692690358},
		{34.98739099665525, 39.76612469526532},
		{35.72557371776472, 39.85807610154717},
		{36.92927707381011, 39.26849386844984},
		{37.01573090601232, 39.76612469526532},
		{36.49700791280054, 39.955002436479276},
		{37.195288865201064, 38.23645569890934},
		{33.58417879706667, 37.74904392916447},
	},

	Russia: {
		{37.56462970945239, 55.718881081419795},
		{39.87641174492495, 55.109633658318245},
		{39.87641174492495, 59.25113971092151},
		{44.032115165833375, 56.318770920357366},
		{45.13296375415439, 54.202205550272794},
		{39.463593524305196, 52.59431837816018},
		{44.99535768061446, 53.225002037687574},
		{39.931454174341894, 57.69728211808126},
		{36.29865383288546, 54.522910526711826},
		{39.18838137722534, 51.66515918953465},
		{47.27961850137774, 56.13518140852079},
		{49.09601867210597, 55.811778955647355},
		{48.38046708969867, 54.34683267047012},
		{49.67395363636524, 58.612041388164954},
		{45.98611086549181, 51.54550825863254},
		{32.11541865265971, 54.74591469712945},
		{50.08677185698497, 53.20852080900903},
		{36.05095235590363, 52.92739991753322},
	},

	France: {
		{2.3944775285993103, 48.6994921191457},
		{3.1173013226319313, 48.62815535559989},
		{1.871053401886428, 48.540217624793314},
		{1.8295118045282663, 49.31532421050599},
		{2.411094167542359, 48.3086528246499},
		{1.4224041504178047, 48.78715262674163},
		{1.5304123035491841, 48.0593763499395},
		{2.8846683774260384, 47.82562404910138},
		{3.590875532514616, 47.79214456186094},
		{3.615800490929672, 49.11451859565855},
		{2.99267653055648, 49.580001269757275},
		{2.8597434190110107, 49.25028744102406},
		{4.039524783983268, 49.27739651921712},
		{4.36354924337644, 48.95655990824926},
		{4.064449742398324, 48.29759960904829},
		{3.757041921947234, 48.71045804450213},
		{1.1066880104956738, 49.39649957433471},
		{1.1565379273258145, 49.03287845038443},
	},

	Spain: {
		{-3.927548342551347, 41.0021695858583},
		{-3.6638188436857035, 40.41671333918282},
		{-2.0814418504931496, 40.08603552256861},
		{-1.8553879943221432, 39.02581760076575},
		{-6.338789475036492, 38.937956718059894},
		{-5.641790085178457, 40.93104817578569},
		{-3.682656665034159, 42.36672465266321},
		{-5.491087514397776, 42.616753724618206},
		{-0.8946591055973272, 41.66695988303937},
		{-2.458198277443728, 42.491864127185636},
		{-7.826977361492595, 42.36672465266321},
		{-1.1395507831155953, 37.96430969844525},
		{-4.775250303191228, 37.89001402208136},
		{-6.018546512129035, 37.41274672115338},
		{-8.373274180571116, 40.18684761732882},
		{-7.940004289577502, 38.600147570319024},
	},

	China: {
		{103.301267932224, 34.64680403578818},
		{102.51318902240911, 35.19357227042349},
		{103.33157865952609, 35.44089642846869},
		{104.58947384250081, 35.56427457619367},
		{103.80139493268405, 36.14160679551233},
		{101.43715820323752, 36.05588778177807},
		{101.7857315671946, 36.641793676346225},
		{105.65034929802135, 34.59691745251712},
		{104.98351329740916, 33.37803820884088},
		{104.66525066075229, 32.946684948716054},
		{100.58845783882032, 35.21833870998465},
		{99.95193256550829, 35.58892745504333},
		{98.19391038207164, 34.92064349520648},
		{104.60462920615186, 34.88335530450625},
		{97.1178795629001, 33.340063063262136},
	},
}
